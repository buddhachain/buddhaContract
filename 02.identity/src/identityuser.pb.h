// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: identityuser.proto

#ifndef PROTOBUF_INCLUDED_identityuser_2eproto
#define PROTOBUF_INCLUDED_identityuser_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_identityuser_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_identityuser_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
class IdentityUser;
class IdentityUserDefaultTypeInternal;
extern IdentityUserDefaultTypeInternal _IdentityUser_default_instance_;
namespace google {
namespace protobuf {
template<> ::IdentityUser* Arena::CreateMaybeMessage<::IdentityUser>(Arena*);
}  // namespace protobuf
}  // namespace google

// ===================================================================

class IdentityUser :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:IdentityUser) */ {
 public:
  IdentityUser();
  virtual ~IdentityUser();

  IdentityUser(const IdentityUser& from);

  inline IdentityUser& operator=(const IdentityUser& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IdentityUser(IdentityUser&& from) noexcept
    : IdentityUser() {
    *this = ::std::move(from);
  }

  inline IdentityUser& operator=(IdentityUser&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const IdentityUser& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IdentityUser* internal_default_instance() {
    return reinterpret_cast<const IdentityUser*>(
               &_IdentityUser_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(IdentityUser* other);
  friend void swap(IdentityUser& a, IdentityUser& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IdentityUser* New() const final {
    return CreateMaybeMessage<IdentityUser>(nullptr);
  }

  IdentityUser* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IdentityUser>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const IdentityUser& from);
  void MergeFrom(const IdentityUser& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IdentityUser* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string nickname = 2;
  void clear_nickname();
  static const int kNicknameFieldNumber = 2;
  const ::std::string& nickname() const;
  void set_nickname(const ::std::string& value);
  #if LANG_CXX11
  void set_nickname(::std::string&& value);
  #endif
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  ::std::string* mutable_nickname();
  ::std::string* release_nickname();
  void set_allocated_nickname(::std::string* nickname);

  // string photo = 3;
  void clear_photo();
  static const int kPhotoFieldNumber = 3;
  const ::std::string& photo() const;
  void set_photo(const ::std::string& value);
  #if LANG_CXX11
  void set_photo(::std::string&& value);
  #endif
  void set_photo(const char* value);
  void set_photo(const char* value, size_t size);
  ::std::string* mutable_photo();
  ::std::string* release_photo();
  void set_allocated_photo(::std::string* photo);

  // string name = 4;
  void clear_name();
  static const int kNameFieldNumber = 4;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string phone = 6;
  void clear_phone();
  static const int kPhoneFieldNumber = 6;
  const ::std::string& phone() const;
  void set_phone(const ::std::string& value);
  #if LANG_CXX11
  void set_phone(::std::string&& value);
  #endif
  void set_phone(const char* value);
  void set_phone(const char* value, size_t size);
  ::std::string* mutable_phone();
  ::std::string* release_phone();
  void set_allocated_phone(::std::string* phone);

  // string email = 8;
  void clear_email();
  static const int kEmailFieldNumber = 8;
  const ::std::string& email() const;
  void set_email(const ::std::string& value);
  #if LANG_CXX11
  void set_email(::std::string&& value);
  #endif
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  ::std::string* mutable_email();
  ::std::string* release_email();
  void set_allocated_email(::std::string* email);

  // string home_address = 9;
  void clear_home_address();
  static const int kHomeAddressFieldNumber = 9;
  const ::std::string& home_address() const;
  void set_home_address(const ::std::string& value);
  #if LANG_CXX11
  void set_home_address(::std::string&& value);
  #endif
  void set_home_address(const char* value);
  void set_home_address(const char* value, size_t size);
  ::std::string* mutable_home_address();
  ::std::string* release_home_address();
  void set_allocated_home_address(::std::string* home_address);

  // string born_timestamp = 10;
  void clear_born_timestamp();
  static const int kBornTimestampFieldNumber = 10;
  const ::std::string& born_timestamp() const;
  void set_born_timestamp(const ::std::string& value);
  #if LANG_CXX11
  void set_born_timestamp(::std::string&& value);
  #endif
  void set_born_timestamp(const char* value);
  void set_born_timestamp(const char* value, size_t size);
  ::std::string* mutable_born_timestamp();
  ::std::string* release_born_timestamp();
  void set_allocated_born_timestamp(::std::string* born_timestamp);

  // string idcard = 11;
  void clear_idcard();
  static const int kIdcardFieldNumber = 11;
  const ::std::string& idcard() const;
  void set_idcard(const ::std::string& value);
  #if LANG_CXX11
  void set_idcard(::std::string&& value);
  #endif
  void set_idcard(const char* value);
  void set_idcard(const char* value, size_t size);
  ::std::string* mutable_idcard();
  ::std::string* release_idcard();
  void set_allocated_idcard(::std::string* idcard);

  // string otherid = 12;
  void clear_otherid();
  static const int kOtheridFieldNumber = 12;
  const ::std::string& otherid() const;
  void set_otherid(const ::std::string& value);
  #if LANG_CXX11
  void set_otherid(::std::string&& value);
  #endif
  void set_otherid(const char* value);
  void set_otherid(const char* value, size_t size);
  ::std::string* mutable_otherid();
  ::std::string* release_otherid();
  void set_allocated_otherid(::std::string* otherid);

  // string photos = 13;
  void clear_photos();
  static const int kPhotosFieldNumber = 13;
  const ::std::string& photos() const;
  void set_photos(const ::std::string& value);
  #if LANG_CXX11
  void set_photos(::std::string&& value);
  #endif
  void set_photos(const char* value);
  void set_photos(const char* value, size_t size);
  ::std::string* mutable_photos();
  ::std::string* release_photos();
  void set_allocated_photos(::std::string* photos);

  // string desc = 14;
  void clear_desc();
  static const int kDescFieldNumber = 14;
  const ::std::string& desc() const;
  void set_desc(const ::std::string& value);
  #if LANG_CXX11
  void set_desc(::std::string&& value);
  #endif
  void set_desc(const char* value);
  void set_desc(const char* value, size_t size);
  ::std::string* mutable_desc();
  ::std::string* release_desc();
  void set_allocated_desc(::std::string* desc);

  // string degree = 15;
  void clear_degree();
  static const int kDegreeFieldNumber = 15;
  const ::std::string& degree() const;
  void set_degree(const ::std::string& value);
  #if LANG_CXX11
  void set_degree(::std::string&& value);
  #endif
  void set_degree(const char* value);
  void set_degree(const char* value, size_t size);
  ::std::string* mutable_degree();
  ::std::string* release_degree();
  void set_allocated_degree(::std::string* degree);

  // string job = 16;
  void clear_job();
  static const int kJobFieldNumber = 16;
  const ::std::string& job() const;
  void set_job(const ::std::string& value);
  #if LANG_CXX11
  void set_job(::std::string&& value);
  #endif
  void set_job(const char* value);
  void set_job(const char* value, size_t size);
  ::std::string* mutable_job();
  ::std::string* release_job();
  void set_allocated_job(::std::string* job);

  // string income = 17;
  void clear_income();
  static const int kIncomeFieldNumber = 17;
  const ::std::string& income() const;
  void set_income(const ::std::string& value);
  #if LANG_CXX11
  void set_income(::std::string&& value);
  #endif
  void set_income(const char* value);
  void set_income(const char* value, size_t size);
  ::std::string* mutable_income();
  ::std::string* release_income();
  void set_allocated_income(::std::string* income);

  // string marry = 18;
  void clear_marry();
  static const int kMarryFieldNumber = 18;
  const ::std::string& marry() const;
  void set_marry(const ::std::string& value);
  #if LANG_CXX11
  void set_marry(::std::string&& value);
  #endif
  void set_marry(const char* value);
  void set_marry(const char* value, size_t size);
  ::std::string* mutable_marry();
  ::std::string* release_marry();
  void set_allocated_marry(::std::string* marry);

  // string hobyy = 19;
  void clear_hobyy();
  static const int kHobyyFieldNumber = 19;
  const ::std::string& hobyy() const;
  void set_hobyy(const ::std::string& value);
  #if LANG_CXX11
  void set_hobyy(::std::string&& value);
  #endif
  void set_hobyy(const char* value);
  void set_hobyy(const char* value, size_t size);
  ::std::string* mutable_hobyy();
  ::std::string* release_hobyy();
  void set_allocated_hobyy(::std::string* hobyy);

  // string recommender = 20;
  void clear_recommender();
  static const int kRecommenderFieldNumber = 20;
  const ::std::string& recommender() const;
  void set_recommender(const ::std::string& value);
  #if LANG_CXX11
  void set_recommender(::std::string&& value);
  #endif
  void set_recommender(const char* value);
  void set_recommender(const char* value, size_t size);
  ::std::string* mutable_recommender();
  ::std::string* release_recommender();
  void set_allocated_recommender(::std::string* recommender);

  // string belief = 21;
  void clear_belief();
  static const int kBeliefFieldNumber = 21;
  const ::std::string& belief() const;
  void set_belief(const ::std::string& value);
  #if LANG_CXX11
  void set_belief(::std::string&& value);
  #endif
  void set_belief(const char* value);
  void set_belief(const char* value, size_t size);
  ::std::string* mutable_belief();
  ::std::string* release_belief();
  void set_allocated_belief(::std::string* belief);

  // string idname = 22;
  void clear_idname();
  static const int kIdnameFieldNumber = 22;
  const ::std::string& idname() const;
  void set_idname(const ::std::string& value);
  #if LANG_CXX11
  void set_idname(::std::string&& value);
  #endif
  void set_idname(const char* value);
  void set_idname(const char* value, size_t size);
  ::std::string* mutable_idname();
  ::std::string* release_idname();
  void set_allocated_idname(::std::string* idname);

  // int64 sex = 5;
  void clear_sex();
  static const int kSexFieldNumber = 5;
  ::google::protobuf::int64 sex() const;
  void set_sex(::google::protobuf::int64 value);

  // int64 wechat = 7;
  void clear_wechat();
  static const int kWechatFieldNumber = 7;
  ::google::protobuf::int64 wechat() const;
  void set_wechat(::google::protobuf::int64 value);

  // bool approved = 23;
  void clear_approved();
  static const int kApprovedFieldNumber = 23;
  bool approved() const;
  void set_approved(bool value);

  // @@protoc_insertion_point(class_scope:IdentityUser)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr nickname_;
  ::google::protobuf::internal::ArenaStringPtr photo_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr phone_;
  ::google::protobuf::internal::ArenaStringPtr email_;
  ::google::protobuf::internal::ArenaStringPtr home_address_;
  ::google::protobuf::internal::ArenaStringPtr born_timestamp_;
  ::google::protobuf::internal::ArenaStringPtr idcard_;
  ::google::protobuf::internal::ArenaStringPtr otherid_;
  ::google::protobuf::internal::ArenaStringPtr photos_;
  ::google::protobuf::internal::ArenaStringPtr desc_;
  ::google::protobuf::internal::ArenaStringPtr degree_;
  ::google::protobuf::internal::ArenaStringPtr job_;
  ::google::protobuf::internal::ArenaStringPtr income_;
  ::google::protobuf::internal::ArenaStringPtr marry_;
  ::google::protobuf::internal::ArenaStringPtr hobyy_;
  ::google::protobuf::internal::ArenaStringPtr recommender_;
  ::google::protobuf::internal::ArenaStringPtr belief_;
  ::google::protobuf::internal::ArenaStringPtr idname_;
  ::google::protobuf::int64 sex_;
  ::google::protobuf::int64 wechat_;
  bool approved_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_identityuser_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// IdentityUser

// string id = 1;
inline void IdentityUser::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IdentityUser::id() const {
  // @@protoc_insertion_point(field_get:IdentityUser.id)
  return id_.GetNoArena();
}
inline void IdentityUser::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IdentityUser.id)
}
#if LANG_CXX11
inline void IdentityUser::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IdentityUser.id)
}
#endif
inline void IdentityUser::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IdentityUser.id)
}
inline void IdentityUser::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IdentityUser.id)
}
inline ::std::string* IdentityUser::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:IdentityUser.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IdentityUser::release_id() {
  // @@protoc_insertion_point(field_release:IdentityUser.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IdentityUser::set_allocated_id(::std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:IdentityUser.id)
}

// string nickname = 2;
inline void IdentityUser::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IdentityUser::nickname() const {
  // @@protoc_insertion_point(field_get:IdentityUser.nickname)
  return nickname_.GetNoArena();
}
inline void IdentityUser::set_nickname(const ::std::string& value) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IdentityUser.nickname)
}
#if LANG_CXX11
inline void IdentityUser::set_nickname(::std::string&& value) {
  
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IdentityUser.nickname)
}
#endif
inline void IdentityUser::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IdentityUser.nickname)
}
inline void IdentityUser::set_nickname(const char* value, size_t size) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IdentityUser.nickname)
}
inline ::std::string* IdentityUser::mutable_nickname() {
  
  // @@protoc_insertion_point(field_mutable:IdentityUser.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IdentityUser::release_nickname() {
  // @@protoc_insertion_point(field_release:IdentityUser.nickname)
  
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IdentityUser::set_allocated_nickname(::std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:IdentityUser.nickname)
}

// string photo = 3;
inline void IdentityUser::clear_photo() {
  photo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IdentityUser::photo() const {
  // @@protoc_insertion_point(field_get:IdentityUser.photo)
  return photo_.GetNoArena();
}
inline void IdentityUser::set_photo(const ::std::string& value) {
  
  photo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IdentityUser.photo)
}
#if LANG_CXX11
inline void IdentityUser::set_photo(::std::string&& value) {
  
  photo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IdentityUser.photo)
}
#endif
inline void IdentityUser::set_photo(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  photo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IdentityUser.photo)
}
inline void IdentityUser::set_photo(const char* value, size_t size) {
  
  photo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IdentityUser.photo)
}
inline ::std::string* IdentityUser::mutable_photo() {
  
  // @@protoc_insertion_point(field_mutable:IdentityUser.photo)
  return photo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IdentityUser::release_photo() {
  // @@protoc_insertion_point(field_release:IdentityUser.photo)
  
  return photo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IdentityUser::set_allocated_photo(::std::string* photo) {
  if (photo != nullptr) {
    
  } else {
    
  }
  photo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), photo);
  // @@protoc_insertion_point(field_set_allocated:IdentityUser.photo)
}

// string name = 4;
inline void IdentityUser::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IdentityUser::name() const {
  // @@protoc_insertion_point(field_get:IdentityUser.name)
  return name_.GetNoArena();
}
inline void IdentityUser::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IdentityUser.name)
}
#if LANG_CXX11
inline void IdentityUser::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IdentityUser.name)
}
#endif
inline void IdentityUser::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IdentityUser.name)
}
inline void IdentityUser::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IdentityUser.name)
}
inline ::std::string* IdentityUser::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:IdentityUser.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IdentityUser::release_name() {
  // @@protoc_insertion_point(field_release:IdentityUser.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IdentityUser::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:IdentityUser.name)
}

// int64 sex = 5;
inline void IdentityUser::clear_sex() {
  sex_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 IdentityUser::sex() const {
  // @@protoc_insertion_point(field_get:IdentityUser.sex)
  return sex_;
}
inline void IdentityUser::set_sex(::google::protobuf::int64 value) {
  
  sex_ = value;
  // @@protoc_insertion_point(field_set:IdentityUser.sex)
}

// string phone = 6;
inline void IdentityUser::clear_phone() {
  phone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IdentityUser::phone() const {
  // @@protoc_insertion_point(field_get:IdentityUser.phone)
  return phone_.GetNoArena();
}
inline void IdentityUser::set_phone(const ::std::string& value) {
  
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IdentityUser.phone)
}
#if LANG_CXX11
inline void IdentityUser::set_phone(::std::string&& value) {
  
  phone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IdentityUser.phone)
}
#endif
inline void IdentityUser::set_phone(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IdentityUser.phone)
}
inline void IdentityUser::set_phone(const char* value, size_t size) {
  
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IdentityUser.phone)
}
inline ::std::string* IdentityUser::mutable_phone() {
  
  // @@protoc_insertion_point(field_mutable:IdentityUser.phone)
  return phone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IdentityUser::release_phone() {
  // @@protoc_insertion_point(field_release:IdentityUser.phone)
  
  return phone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IdentityUser::set_allocated_phone(::std::string* phone) {
  if (phone != nullptr) {
    
  } else {
    
  }
  phone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phone);
  // @@protoc_insertion_point(field_set_allocated:IdentityUser.phone)
}

// int64 wechat = 7;
inline void IdentityUser::clear_wechat() {
  wechat_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 IdentityUser::wechat() const {
  // @@protoc_insertion_point(field_get:IdentityUser.wechat)
  return wechat_;
}
inline void IdentityUser::set_wechat(::google::protobuf::int64 value) {
  
  wechat_ = value;
  // @@protoc_insertion_point(field_set:IdentityUser.wechat)
}

// string email = 8;
inline void IdentityUser::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IdentityUser::email() const {
  // @@protoc_insertion_point(field_get:IdentityUser.email)
  return email_.GetNoArena();
}
inline void IdentityUser::set_email(const ::std::string& value) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IdentityUser.email)
}
#if LANG_CXX11
inline void IdentityUser::set_email(::std::string&& value) {
  
  email_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IdentityUser.email)
}
#endif
inline void IdentityUser::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IdentityUser.email)
}
inline void IdentityUser::set_email(const char* value, size_t size) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IdentityUser.email)
}
inline ::std::string* IdentityUser::mutable_email() {
  
  // @@protoc_insertion_point(field_mutable:IdentityUser.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IdentityUser::release_email() {
  // @@protoc_insertion_point(field_release:IdentityUser.email)
  
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IdentityUser::set_allocated_email(::std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:IdentityUser.email)
}

// string home_address = 9;
inline void IdentityUser::clear_home_address() {
  home_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IdentityUser::home_address() const {
  // @@protoc_insertion_point(field_get:IdentityUser.home_address)
  return home_address_.GetNoArena();
}
inline void IdentityUser::set_home_address(const ::std::string& value) {
  
  home_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IdentityUser.home_address)
}
#if LANG_CXX11
inline void IdentityUser::set_home_address(::std::string&& value) {
  
  home_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IdentityUser.home_address)
}
#endif
inline void IdentityUser::set_home_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  home_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IdentityUser.home_address)
}
inline void IdentityUser::set_home_address(const char* value, size_t size) {
  
  home_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IdentityUser.home_address)
}
inline ::std::string* IdentityUser::mutable_home_address() {
  
  // @@protoc_insertion_point(field_mutable:IdentityUser.home_address)
  return home_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IdentityUser::release_home_address() {
  // @@protoc_insertion_point(field_release:IdentityUser.home_address)
  
  return home_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IdentityUser::set_allocated_home_address(::std::string* home_address) {
  if (home_address != nullptr) {
    
  } else {
    
  }
  home_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), home_address);
  // @@protoc_insertion_point(field_set_allocated:IdentityUser.home_address)
}

// string born_timestamp = 10;
inline void IdentityUser::clear_born_timestamp() {
  born_timestamp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IdentityUser::born_timestamp() const {
  // @@protoc_insertion_point(field_get:IdentityUser.born_timestamp)
  return born_timestamp_.GetNoArena();
}
inline void IdentityUser::set_born_timestamp(const ::std::string& value) {
  
  born_timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IdentityUser.born_timestamp)
}
#if LANG_CXX11
inline void IdentityUser::set_born_timestamp(::std::string&& value) {
  
  born_timestamp_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IdentityUser.born_timestamp)
}
#endif
inline void IdentityUser::set_born_timestamp(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  born_timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IdentityUser.born_timestamp)
}
inline void IdentityUser::set_born_timestamp(const char* value, size_t size) {
  
  born_timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IdentityUser.born_timestamp)
}
inline ::std::string* IdentityUser::mutable_born_timestamp() {
  
  // @@protoc_insertion_point(field_mutable:IdentityUser.born_timestamp)
  return born_timestamp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IdentityUser::release_born_timestamp() {
  // @@protoc_insertion_point(field_release:IdentityUser.born_timestamp)
  
  return born_timestamp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IdentityUser::set_allocated_born_timestamp(::std::string* born_timestamp) {
  if (born_timestamp != nullptr) {
    
  } else {
    
  }
  born_timestamp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), born_timestamp);
  // @@protoc_insertion_point(field_set_allocated:IdentityUser.born_timestamp)
}

// string idcard = 11;
inline void IdentityUser::clear_idcard() {
  idcard_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IdentityUser::idcard() const {
  // @@protoc_insertion_point(field_get:IdentityUser.idcard)
  return idcard_.GetNoArena();
}
inline void IdentityUser::set_idcard(const ::std::string& value) {
  
  idcard_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IdentityUser.idcard)
}
#if LANG_CXX11
inline void IdentityUser::set_idcard(::std::string&& value) {
  
  idcard_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IdentityUser.idcard)
}
#endif
inline void IdentityUser::set_idcard(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  idcard_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IdentityUser.idcard)
}
inline void IdentityUser::set_idcard(const char* value, size_t size) {
  
  idcard_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IdentityUser.idcard)
}
inline ::std::string* IdentityUser::mutable_idcard() {
  
  // @@protoc_insertion_point(field_mutable:IdentityUser.idcard)
  return idcard_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IdentityUser::release_idcard() {
  // @@protoc_insertion_point(field_release:IdentityUser.idcard)
  
  return idcard_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IdentityUser::set_allocated_idcard(::std::string* idcard) {
  if (idcard != nullptr) {
    
  } else {
    
  }
  idcard_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), idcard);
  // @@protoc_insertion_point(field_set_allocated:IdentityUser.idcard)
}

// string otherid = 12;
inline void IdentityUser::clear_otherid() {
  otherid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IdentityUser::otherid() const {
  // @@protoc_insertion_point(field_get:IdentityUser.otherid)
  return otherid_.GetNoArena();
}
inline void IdentityUser::set_otherid(const ::std::string& value) {
  
  otherid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IdentityUser.otherid)
}
#if LANG_CXX11
inline void IdentityUser::set_otherid(::std::string&& value) {
  
  otherid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IdentityUser.otherid)
}
#endif
inline void IdentityUser::set_otherid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  otherid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IdentityUser.otherid)
}
inline void IdentityUser::set_otherid(const char* value, size_t size) {
  
  otherid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IdentityUser.otherid)
}
inline ::std::string* IdentityUser::mutable_otherid() {
  
  // @@protoc_insertion_point(field_mutable:IdentityUser.otherid)
  return otherid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IdentityUser::release_otherid() {
  // @@protoc_insertion_point(field_release:IdentityUser.otherid)
  
  return otherid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IdentityUser::set_allocated_otherid(::std::string* otherid) {
  if (otherid != nullptr) {
    
  } else {
    
  }
  otherid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), otherid);
  // @@protoc_insertion_point(field_set_allocated:IdentityUser.otherid)
}

// string photos = 13;
inline void IdentityUser::clear_photos() {
  photos_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IdentityUser::photos() const {
  // @@protoc_insertion_point(field_get:IdentityUser.photos)
  return photos_.GetNoArena();
}
inline void IdentityUser::set_photos(const ::std::string& value) {
  
  photos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IdentityUser.photos)
}
#if LANG_CXX11
inline void IdentityUser::set_photos(::std::string&& value) {
  
  photos_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IdentityUser.photos)
}
#endif
inline void IdentityUser::set_photos(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  photos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IdentityUser.photos)
}
inline void IdentityUser::set_photos(const char* value, size_t size) {
  
  photos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IdentityUser.photos)
}
inline ::std::string* IdentityUser::mutable_photos() {
  
  // @@protoc_insertion_point(field_mutable:IdentityUser.photos)
  return photos_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IdentityUser::release_photos() {
  // @@protoc_insertion_point(field_release:IdentityUser.photos)
  
  return photos_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IdentityUser::set_allocated_photos(::std::string* photos) {
  if (photos != nullptr) {
    
  } else {
    
  }
  photos_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), photos);
  // @@protoc_insertion_point(field_set_allocated:IdentityUser.photos)
}

// string desc = 14;
inline void IdentityUser::clear_desc() {
  desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IdentityUser::desc() const {
  // @@protoc_insertion_point(field_get:IdentityUser.desc)
  return desc_.GetNoArena();
}
inline void IdentityUser::set_desc(const ::std::string& value) {
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IdentityUser.desc)
}
#if LANG_CXX11
inline void IdentityUser::set_desc(::std::string&& value) {
  
  desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IdentityUser.desc)
}
#endif
inline void IdentityUser::set_desc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IdentityUser.desc)
}
inline void IdentityUser::set_desc(const char* value, size_t size) {
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IdentityUser.desc)
}
inline ::std::string* IdentityUser::mutable_desc() {
  
  // @@protoc_insertion_point(field_mutable:IdentityUser.desc)
  return desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IdentityUser::release_desc() {
  // @@protoc_insertion_point(field_release:IdentityUser.desc)
  
  return desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IdentityUser::set_allocated_desc(::std::string* desc) {
  if (desc != nullptr) {
    
  } else {
    
  }
  desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:IdentityUser.desc)
}

// string degree = 15;
inline void IdentityUser::clear_degree() {
  degree_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IdentityUser::degree() const {
  // @@protoc_insertion_point(field_get:IdentityUser.degree)
  return degree_.GetNoArena();
}
inline void IdentityUser::set_degree(const ::std::string& value) {
  
  degree_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IdentityUser.degree)
}
#if LANG_CXX11
inline void IdentityUser::set_degree(::std::string&& value) {
  
  degree_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IdentityUser.degree)
}
#endif
inline void IdentityUser::set_degree(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  degree_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IdentityUser.degree)
}
inline void IdentityUser::set_degree(const char* value, size_t size) {
  
  degree_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IdentityUser.degree)
}
inline ::std::string* IdentityUser::mutable_degree() {
  
  // @@protoc_insertion_point(field_mutable:IdentityUser.degree)
  return degree_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IdentityUser::release_degree() {
  // @@protoc_insertion_point(field_release:IdentityUser.degree)
  
  return degree_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IdentityUser::set_allocated_degree(::std::string* degree) {
  if (degree != nullptr) {
    
  } else {
    
  }
  degree_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), degree);
  // @@protoc_insertion_point(field_set_allocated:IdentityUser.degree)
}

// string job = 16;
inline void IdentityUser::clear_job() {
  job_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IdentityUser::job() const {
  // @@protoc_insertion_point(field_get:IdentityUser.job)
  return job_.GetNoArena();
}
inline void IdentityUser::set_job(const ::std::string& value) {
  
  job_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IdentityUser.job)
}
#if LANG_CXX11
inline void IdentityUser::set_job(::std::string&& value) {
  
  job_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IdentityUser.job)
}
#endif
inline void IdentityUser::set_job(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  job_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IdentityUser.job)
}
inline void IdentityUser::set_job(const char* value, size_t size) {
  
  job_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IdentityUser.job)
}
inline ::std::string* IdentityUser::mutable_job() {
  
  // @@protoc_insertion_point(field_mutable:IdentityUser.job)
  return job_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IdentityUser::release_job() {
  // @@protoc_insertion_point(field_release:IdentityUser.job)
  
  return job_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IdentityUser::set_allocated_job(::std::string* job) {
  if (job != nullptr) {
    
  } else {
    
  }
  job_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), job);
  // @@protoc_insertion_point(field_set_allocated:IdentityUser.job)
}

// string income = 17;
inline void IdentityUser::clear_income() {
  income_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IdentityUser::income() const {
  // @@protoc_insertion_point(field_get:IdentityUser.income)
  return income_.GetNoArena();
}
inline void IdentityUser::set_income(const ::std::string& value) {
  
  income_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IdentityUser.income)
}
#if LANG_CXX11
inline void IdentityUser::set_income(::std::string&& value) {
  
  income_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IdentityUser.income)
}
#endif
inline void IdentityUser::set_income(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  income_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IdentityUser.income)
}
inline void IdentityUser::set_income(const char* value, size_t size) {
  
  income_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IdentityUser.income)
}
inline ::std::string* IdentityUser::mutable_income() {
  
  // @@protoc_insertion_point(field_mutable:IdentityUser.income)
  return income_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IdentityUser::release_income() {
  // @@protoc_insertion_point(field_release:IdentityUser.income)
  
  return income_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IdentityUser::set_allocated_income(::std::string* income) {
  if (income != nullptr) {
    
  } else {
    
  }
  income_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), income);
  // @@protoc_insertion_point(field_set_allocated:IdentityUser.income)
}

// string marry = 18;
inline void IdentityUser::clear_marry() {
  marry_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IdentityUser::marry() const {
  // @@protoc_insertion_point(field_get:IdentityUser.marry)
  return marry_.GetNoArena();
}
inline void IdentityUser::set_marry(const ::std::string& value) {
  
  marry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IdentityUser.marry)
}
#if LANG_CXX11
inline void IdentityUser::set_marry(::std::string&& value) {
  
  marry_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IdentityUser.marry)
}
#endif
inline void IdentityUser::set_marry(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  marry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IdentityUser.marry)
}
inline void IdentityUser::set_marry(const char* value, size_t size) {
  
  marry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IdentityUser.marry)
}
inline ::std::string* IdentityUser::mutable_marry() {
  
  // @@protoc_insertion_point(field_mutable:IdentityUser.marry)
  return marry_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IdentityUser::release_marry() {
  // @@protoc_insertion_point(field_release:IdentityUser.marry)
  
  return marry_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IdentityUser::set_allocated_marry(::std::string* marry) {
  if (marry != nullptr) {
    
  } else {
    
  }
  marry_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), marry);
  // @@protoc_insertion_point(field_set_allocated:IdentityUser.marry)
}

// string hobyy = 19;
inline void IdentityUser::clear_hobyy() {
  hobyy_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IdentityUser::hobyy() const {
  // @@protoc_insertion_point(field_get:IdentityUser.hobyy)
  return hobyy_.GetNoArena();
}
inline void IdentityUser::set_hobyy(const ::std::string& value) {
  
  hobyy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IdentityUser.hobyy)
}
#if LANG_CXX11
inline void IdentityUser::set_hobyy(::std::string&& value) {
  
  hobyy_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IdentityUser.hobyy)
}
#endif
inline void IdentityUser::set_hobyy(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hobyy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IdentityUser.hobyy)
}
inline void IdentityUser::set_hobyy(const char* value, size_t size) {
  
  hobyy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IdentityUser.hobyy)
}
inline ::std::string* IdentityUser::mutable_hobyy() {
  
  // @@protoc_insertion_point(field_mutable:IdentityUser.hobyy)
  return hobyy_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IdentityUser::release_hobyy() {
  // @@protoc_insertion_point(field_release:IdentityUser.hobyy)
  
  return hobyy_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IdentityUser::set_allocated_hobyy(::std::string* hobyy) {
  if (hobyy != nullptr) {
    
  } else {
    
  }
  hobyy_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hobyy);
  // @@protoc_insertion_point(field_set_allocated:IdentityUser.hobyy)
}

// string recommender = 20;
inline void IdentityUser::clear_recommender() {
  recommender_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IdentityUser::recommender() const {
  // @@protoc_insertion_point(field_get:IdentityUser.recommender)
  return recommender_.GetNoArena();
}
inline void IdentityUser::set_recommender(const ::std::string& value) {
  
  recommender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IdentityUser.recommender)
}
#if LANG_CXX11
inline void IdentityUser::set_recommender(::std::string&& value) {
  
  recommender_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IdentityUser.recommender)
}
#endif
inline void IdentityUser::set_recommender(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  recommender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IdentityUser.recommender)
}
inline void IdentityUser::set_recommender(const char* value, size_t size) {
  
  recommender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IdentityUser.recommender)
}
inline ::std::string* IdentityUser::mutable_recommender() {
  
  // @@protoc_insertion_point(field_mutable:IdentityUser.recommender)
  return recommender_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IdentityUser::release_recommender() {
  // @@protoc_insertion_point(field_release:IdentityUser.recommender)
  
  return recommender_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IdentityUser::set_allocated_recommender(::std::string* recommender) {
  if (recommender != nullptr) {
    
  } else {
    
  }
  recommender_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), recommender);
  // @@protoc_insertion_point(field_set_allocated:IdentityUser.recommender)
}

// string belief = 21;
inline void IdentityUser::clear_belief() {
  belief_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IdentityUser::belief() const {
  // @@protoc_insertion_point(field_get:IdentityUser.belief)
  return belief_.GetNoArena();
}
inline void IdentityUser::set_belief(const ::std::string& value) {
  
  belief_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IdentityUser.belief)
}
#if LANG_CXX11
inline void IdentityUser::set_belief(::std::string&& value) {
  
  belief_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IdentityUser.belief)
}
#endif
inline void IdentityUser::set_belief(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  belief_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IdentityUser.belief)
}
inline void IdentityUser::set_belief(const char* value, size_t size) {
  
  belief_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IdentityUser.belief)
}
inline ::std::string* IdentityUser::mutable_belief() {
  
  // @@protoc_insertion_point(field_mutable:IdentityUser.belief)
  return belief_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IdentityUser::release_belief() {
  // @@protoc_insertion_point(field_release:IdentityUser.belief)
  
  return belief_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IdentityUser::set_allocated_belief(::std::string* belief) {
  if (belief != nullptr) {
    
  } else {
    
  }
  belief_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), belief);
  // @@protoc_insertion_point(field_set_allocated:IdentityUser.belief)
}

// string idname = 22;
inline void IdentityUser::clear_idname() {
  idname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IdentityUser::idname() const {
  // @@protoc_insertion_point(field_get:IdentityUser.idname)
  return idname_.GetNoArena();
}
inline void IdentityUser::set_idname(const ::std::string& value) {
  
  idname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IdentityUser.idname)
}
#if LANG_CXX11
inline void IdentityUser::set_idname(::std::string&& value) {
  
  idname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IdentityUser.idname)
}
#endif
inline void IdentityUser::set_idname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  idname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IdentityUser.idname)
}
inline void IdentityUser::set_idname(const char* value, size_t size) {
  
  idname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IdentityUser.idname)
}
inline ::std::string* IdentityUser::mutable_idname() {
  
  // @@protoc_insertion_point(field_mutable:IdentityUser.idname)
  return idname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IdentityUser::release_idname() {
  // @@protoc_insertion_point(field_release:IdentityUser.idname)
  
  return idname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IdentityUser::set_allocated_idname(::std::string* idname) {
  if (idname != nullptr) {
    
  } else {
    
  }
  idname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), idname);
  // @@protoc_insertion_point(field_set_allocated:IdentityUser.idname)
}

// bool approved = 23;
inline void IdentityUser::clear_approved() {
  approved_ = false;
}
inline bool IdentityUser::approved() const {
  // @@protoc_insertion_point(field_get:IdentityUser.approved)
  return approved_;
}
inline void IdentityUser::set_approved(bool value) {
  
  approved_ = value;
  // @@protoc_insertion_point(field_set:IdentityUser.approved)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_identityuser_2eproto
