// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: templemaster.proto

#include "templemaster.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

class TempleMasterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TempleMaster> _instance;
} _TempleMaster_default_instance_;
static void InitDefaultsTempleMaster_templemaster_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TempleMaster_default_instance_;
    new (ptr) ::TempleMaster();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TempleMaster::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TempleMaster_templemaster_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTempleMaster_templemaster_2eproto}, {}};


// ===================================================================

void TempleMaster::InitAsDefaultInstance() {
}
class TempleMaster::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TempleMaster::kTempleidFieldNumber;
const int TempleMaster::kMasteridFieldNumber;
const int TempleMaster::kApprovedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TempleMaster::TempleMaster()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TempleMaster)
}
TempleMaster::TempleMaster(const TempleMaster& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  templeid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.templeid().size() > 0) {
    templeid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.templeid_);
  }
  masterid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.masterid().size() > 0) {
    masterid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.masterid_);
  }
  approved_ = from.approved_;
  // @@protoc_insertion_point(copy_constructor:TempleMaster)
}

void TempleMaster::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TempleMaster_templemaster_2eproto.base);
  templeid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  masterid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  approved_ = false;
}

TempleMaster::~TempleMaster() {
  // @@protoc_insertion_point(destructor:TempleMaster)
  SharedDtor();
}

void TempleMaster::SharedDtor() {
  templeid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  masterid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TempleMaster::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TempleMaster& TempleMaster::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TempleMaster_templemaster_2eproto.base);
  return *internal_default_instance();
}


void TempleMaster::Clear() {
// @@protoc_insertion_point(message_clear_start:TempleMaster)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  templeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  masterid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  approved_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TempleMaster::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TempleMaster*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string templeid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName(nullptr);
        object = msg->mutable_templeid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string masterid = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName(nullptr);
        object = msg->mutable_masterid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bool approved = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_approved(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TempleMaster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:TempleMaster)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string templeid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_templeid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->templeid().data(), static_cast<int>(this->templeid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TempleMaster.templeid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string masterid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_masterid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->masterid().data(), static_cast<int>(this->masterid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TempleMaster.masterid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool approved = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &approved_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TempleMaster)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TempleMaster)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TempleMaster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TempleMaster)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string templeid = 1;
  if (this->templeid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->templeid().data(), static_cast<int>(this->templeid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TempleMaster.templeid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->templeid(), output);
  }

  // string masterid = 2;
  if (this->masterid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->masterid().data(), static_cast<int>(this->masterid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TempleMaster.masterid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->masterid(), output);
  }

  // bool approved = 3;
  if (this->approved() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->approved(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:TempleMaster)
}

size_t TempleMaster::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TempleMaster)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string templeid = 1;
  if (this->templeid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->templeid());
  }

  // string masterid = 2;
  if (this->masterid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->masterid());
  }

  // bool approved = 3;
  if (this->approved() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TempleMaster::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TempleMaster*>(&from));
}

void TempleMaster::MergeFrom(const TempleMaster& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TempleMaster)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.templeid().size() > 0) {

    templeid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.templeid_);
  }
  if (from.masterid().size() > 0) {

    masterid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.masterid_);
  }
  if (from.approved() != 0) {
    set_approved(from.approved());
  }
}

void TempleMaster::CopyFrom(const TempleMaster& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TempleMaster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TempleMaster::IsInitialized() const {
  return true;
}

void TempleMaster::Swap(TempleMaster* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TempleMaster::InternalSwap(TempleMaster* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  templeid_.Swap(&other->templeid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  masterid_.Swap(&other->masterid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(approved_, other->approved_);
}

::std::string TempleMaster::GetTypeName() const {
  return "TempleMaster";
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::TempleMaster* Arena::CreateMaybeMessage< ::TempleMaster >(Arena* arena) {
  return Arena::CreateInternal< ::TempleMaster >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
