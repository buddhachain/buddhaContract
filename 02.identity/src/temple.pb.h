// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: temple.proto

#ifndef PROTOBUF_INCLUDED_temple_2eproto
#define PROTOBUF_INCLUDED_temple_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_temple_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_temple_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
class Temple;
class TempleDefaultTypeInternal;
extern TempleDefaultTypeInternal _Temple_default_instance_;
class TempleMaster;
class TempleMasterDefaultTypeInternal;
extern TempleMasterDefaultTypeInternal _TempleMaster_default_instance_;
namespace google {
namespace protobuf {
template<> ::Temple* Arena::CreateMaybeMessage<::Temple>(Arena*);
template<> ::TempleMaster* Arena::CreateMaybeMessage<::TempleMaster>(Arena*);
}  // namespace protobuf
}  // namespace google

// ===================================================================

class Temple :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:Temple) */ {
 public:
  Temple();
  virtual ~Temple();

  Temple(const Temple& from);

  inline Temple& operator=(const Temple& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Temple(Temple&& from) noexcept
    : Temple() {
    *this = ::std::move(from);
  }

  inline Temple& operator=(Temple&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const Temple& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Temple* internal_default_instance() {
    return reinterpret_cast<const Temple*>(
               &_Temple_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Temple* other);
  friend void swap(Temple& a, Temple& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Temple* New() const final {
    return CreateMaybeMessage<Temple>(nullptr);
  }

  Temple* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Temple>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const Temple& from);
  void MergeFrom(const Temple& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Temple* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string photo = 2;
  void clear_photo();
  static const int kPhotoFieldNumber = 2;
  const ::std::string& photo() const;
  void set_photo(const ::std::string& value);
  #if LANG_CXX11
  void set_photo(::std::string&& value);
  #endif
  void set_photo(const char* value);
  void set_photo(const char* value, size_t size);
  ::std::string* mutable_photo();
  ::std::string* release_photo();
  void set_allocated_photo(::std::string* photo);

  // string buddhist_name = 3;
  void clear_buddhist_name();
  static const int kBuddhistNameFieldNumber = 3;
  const ::std::string& buddhist_name() const;
  void set_buddhist_name(const ::std::string& value);
  #if LANG_CXX11
  void set_buddhist_name(::std::string&& value);
  #endif
  void set_buddhist_name(const char* value);
  void set_buddhist_name(const char* value, size_t size);
  ::std::string* mutable_buddhist_name();
  ::std::string* release_buddhist_name();
  void set_allocated_buddhist_name(::std::string* buddhist_name);

  // string unit = 4;
  void clear_unit();
  static const int kUnitFieldNumber = 4;
  const ::std::string& unit() const;
  void set_unit(const ::std::string& value);
  #if LANG_CXX11
  void set_unit(::std::string&& value);
  #endif
  void set_unit(const char* value);
  void set_unit(const char* value, size_t size);
  ::std::string* mutable_unit();
  ::std::string* release_unit();
  void set_allocated_unit(::std::string* unit);

  // string creditcode = 5;
  void clear_creditcode();
  static const int kCreditcodeFieldNumber = 5;
  const ::std::string& creditcode() const;
  void set_creditcode(const ::std::string& value);
  #if LANG_CXX11
  void set_creditcode(::std::string&& value);
  #endif
  void set_creditcode(const char* value);
  void set_creditcode(const char* value, size_t size);
  ::std::string* mutable_creditcode();
  ::std::string* release_creditcode();
  void set_allocated_creditcode(::std::string* creditcode);

  // string address = 6;
  void clear_address();
  static const int kAddressFieldNumber = 6;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // string sect = 7;
  void clear_sect();
  static const int kSectFieldNumber = 7;
  const ::std::string& sect() const;
  void set_sect(const ::std::string& value);
  #if LANG_CXX11
  void set_sect(::std::string&& value);
  #endif
  void set_sect(const char* value);
  void set_sect(const char* value, size_t size);
  ::std::string* mutable_sect();
  ::std::string* release_sect();
  void set_allocated_sect(::std::string* sect);

  // string proof = 8;
  void clear_proof();
  static const int kProofFieldNumber = 8;
  const ::std::string& proof() const;
  void set_proof(const ::std::string& value);
  #if LANG_CXX11
  void set_proof(::std::string&& value);
  #endif
  void set_proof(const char* value);
  void set_proof(const char* value, size_t size);
  ::std::string* mutable_proof();
  ::std::string* release_proof();
  void set_allocated_proof(::std::string* proof);

  // bool approved = 9;
  void clear_approved();
  static const int kApprovedFieldNumber = 9;
  bool approved() const;
  void set_approved(bool value);

  // @@protoc_insertion_point(class_scope:Temple)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr photo_;
  ::google::protobuf::internal::ArenaStringPtr buddhist_name_;
  ::google::protobuf::internal::ArenaStringPtr unit_;
  ::google::protobuf::internal::ArenaStringPtr creditcode_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::internal::ArenaStringPtr sect_;
  ::google::protobuf::internal::ArenaStringPtr proof_;
  bool approved_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_temple_2eproto;
};
// -------------------------------------------------------------------

class TempleMaster :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:TempleMaster) */ {
 public:
  TempleMaster();
  virtual ~TempleMaster();

  TempleMaster(const TempleMaster& from);

  inline TempleMaster& operator=(const TempleMaster& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TempleMaster(TempleMaster&& from) noexcept
    : TempleMaster() {
    *this = ::std::move(from);
  }

  inline TempleMaster& operator=(TempleMaster&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const TempleMaster& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TempleMaster* internal_default_instance() {
    return reinterpret_cast<const TempleMaster*>(
               &_TempleMaster_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(TempleMaster* other);
  friend void swap(TempleMaster& a, TempleMaster& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TempleMaster* New() const final {
    return CreateMaybeMessage<TempleMaster>(nullptr);
  }

  TempleMaster* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TempleMaster>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const TempleMaster& from);
  void MergeFrom(const TempleMaster& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TempleMaster* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string templeid = 1;
  void clear_templeid();
  static const int kTempleidFieldNumber = 1;
  const ::std::string& templeid() const;
  void set_templeid(const ::std::string& value);
  #if LANG_CXX11
  void set_templeid(::std::string&& value);
  #endif
  void set_templeid(const char* value);
  void set_templeid(const char* value, size_t size);
  ::std::string* mutable_templeid();
  ::std::string* release_templeid();
  void set_allocated_templeid(::std::string* templeid);

  // string masterid = 2;
  void clear_masterid();
  static const int kMasteridFieldNumber = 2;
  const ::std::string& masterid() const;
  void set_masterid(const ::std::string& value);
  #if LANG_CXX11
  void set_masterid(::std::string&& value);
  #endif
  void set_masterid(const char* value);
  void set_masterid(const char* value, size_t size);
  ::std::string* mutable_masterid();
  ::std::string* release_masterid();
  void set_allocated_masterid(::std::string* masterid);

  // bool approved = 3;
  void clear_approved();
  static const int kApprovedFieldNumber = 3;
  bool approved() const;
  void set_approved(bool value);

  // @@protoc_insertion_point(class_scope:TempleMaster)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr templeid_;
  ::google::protobuf::internal::ArenaStringPtr masterid_;
  bool approved_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_temple_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Temple

// string id = 1;
inline void Temple::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Temple::id() const {
  // @@protoc_insertion_point(field_get:Temple.id)
  return id_.GetNoArena();
}
inline void Temple::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Temple.id)
}
#if LANG_CXX11
inline void Temple::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Temple.id)
}
#endif
inline void Temple::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Temple.id)
}
inline void Temple::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Temple.id)
}
inline ::std::string* Temple::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:Temple.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Temple::release_id() {
  // @@protoc_insertion_point(field_release:Temple.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Temple::set_allocated_id(::std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:Temple.id)
}

// string photo = 2;
inline void Temple::clear_photo() {
  photo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Temple::photo() const {
  // @@protoc_insertion_point(field_get:Temple.photo)
  return photo_.GetNoArena();
}
inline void Temple::set_photo(const ::std::string& value) {
  
  photo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Temple.photo)
}
#if LANG_CXX11
inline void Temple::set_photo(::std::string&& value) {
  
  photo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Temple.photo)
}
#endif
inline void Temple::set_photo(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  photo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Temple.photo)
}
inline void Temple::set_photo(const char* value, size_t size) {
  
  photo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Temple.photo)
}
inline ::std::string* Temple::mutable_photo() {
  
  // @@protoc_insertion_point(field_mutable:Temple.photo)
  return photo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Temple::release_photo() {
  // @@protoc_insertion_point(field_release:Temple.photo)
  
  return photo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Temple::set_allocated_photo(::std::string* photo) {
  if (photo != nullptr) {
    
  } else {
    
  }
  photo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), photo);
  // @@protoc_insertion_point(field_set_allocated:Temple.photo)
}

// string buddhist_name = 3;
inline void Temple::clear_buddhist_name() {
  buddhist_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Temple::buddhist_name() const {
  // @@protoc_insertion_point(field_get:Temple.buddhist_name)
  return buddhist_name_.GetNoArena();
}
inline void Temple::set_buddhist_name(const ::std::string& value) {
  
  buddhist_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Temple.buddhist_name)
}
#if LANG_CXX11
inline void Temple::set_buddhist_name(::std::string&& value) {
  
  buddhist_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Temple.buddhist_name)
}
#endif
inline void Temple::set_buddhist_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  buddhist_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Temple.buddhist_name)
}
inline void Temple::set_buddhist_name(const char* value, size_t size) {
  
  buddhist_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Temple.buddhist_name)
}
inline ::std::string* Temple::mutable_buddhist_name() {
  
  // @@protoc_insertion_point(field_mutable:Temple.buddhist_name)
  return buddhist_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Temple::release_buddhist_name() {
  // @@protoc_insertion_point(field_release:Temple.buddhist_name)
  
  return buddhist_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Temple::set_allocated_buddhist_name(::std::string* buddhist_name) {
  if (buddhist_name != nullptr) {
    
  } else {
    
  }
  buddhist_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), buddhist_name);
  // @@protoc_insertion_point(field_set_allocated:Temple.buddhist_name)
}

// string unit = 4;
inline void Temple::clear_unit() {
  unit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Temple::unit() const {
  // @@protoc_insertion_point(field_get:Temple.unit)
  return unit_.GetNoArena();
}
inline void Temple::set_unit(const ::std::string& value) {
  
  unit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Temple.unit)
}
#if LANG_CXX11
inline void Temple::set_unit(::std::string&& value) {
  
  unit_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Temple.unit)
}
#endif
inline void Temple::set_unit(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  unit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Temple.unit)
}
inline void Temple::set_unit(const char* value, size_t size) {
  
  unit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Temple.unit)
}
inline ::std::string* Temple::mutable_unit() {
  
  // @@protoc_insertion_point(field_mutable:Temple.unit)
  return unit_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Temple::release_unit() {
  // @@protoc_insertion_point(field_release:Temple.unit)
  
  return unit_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Temple::set_allocated_unit(::std::string* unit) {
  if (unit != nullptr) {
    
  } else {
    
  }
  unit_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unit);
  // @@protoc_insertion_point(field_set_allocated:Temple.unit)
}

// string creditcode = 5;
inline void Temple::clear_creditcode() {
  creditcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Temple::creditcode() const {
  // @@protoc_insertion_point(field_get:Temple.creditcode)
  return creditcode_.GetNoArena();
}
inline void Temple::set_creditcode(const ::std::string& value) {
  
  creditcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Temple.creditcode)
}
#if LANG_CXX11
inline void Temple::set_creditcode(::std::string&& value) {
  
  creditcode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Temple.creditcode)
}
#endif
inline void Temple::set_creditcode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  creditcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Temple.creditcode)
}
inline void Temple::set_creditcode(const char* value, size_t size) {
  
  creditcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Temple.creditcode)
}
inline ::std::string* Temple::mutable_creditcode() {
  
  // @@protoc_insertion_point(field_mutable:Temple.creditcode)
  return creditcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Temple::release_creditcode() {
  // @@protoc_insertion_point(field_release:Temple.creditcode)
  
  return creditcode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Temple::set_allocated_creditcode(::std::string* creditcode) {
  if (creditcode != nullptr) {
    
  } else {
    
  }
  creditcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), creditcode);
  // @@protoc_insertion_point(field_set_allocated:Temple.creditcode)
}

// string address = 6;
inline void Temple::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Temple::address() const {
  // @@protoc_insertion_point(field_get:Temple.address)
  return address_.GetNoArena();
}
inline void Temple::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Temple.address)
}
#if LANG_CXX11
inline void Temple::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Temple.address)
}
#endif
inline void Temple::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Temple.address)
}
inline void Temple::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Temple.address)
}
inline ::std::string* Temple::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:Temple.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Temple::release_address() {
  // @@protoc_insertion_point(field_release:Temple.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Temple::set_allocated_address(::std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:Temple.address)
}

// string sect = 7;
inline void Temple::clear_sect() {
  sect_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Temple::sect() const {
  // @@protoc_insertion_point(field_get:Temple.sect)
  return sect_.GetNoArena();
}
inline void Temple::set_sect(const ::std::string& value) {
  
  sect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Temple.sect)
}
#if LANG_CXX11
inline void Temple::set_sect(::std::string&& value) {
  
  sect_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Temple.sect)
}
#endif
inline void Temple::set_sect(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Temple.sect)
}
inline void Temple::set_sect(const char* value, size_t size) {
  
  sect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Temple.sect)
}
inline ::std::string* Temple::mutable_sect() {
  
  // @@protoc_insertion_point(field_mutable:Temple.sect)
  return sect_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Temple::release_sect() {
  // @@protoc_insertion_point(field_release:Temple.sect)
  
  return sect_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Temple::set_allocated_sect(::std::string* sect) {
  if (sect != nullptr) {
    
  } else {
    
  }
  sect_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sect);
  // @@protoc_insertion_point(field_set_allocated:Temple.sect)
}

// string proof = 8;
inline void Temple::clear_proof() {
  proof_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Temple::proof() const {
  // @@protoc_insertion_point(field_get:Temple.proof)
  return proof_.GetNoArena();
}
inline void Temple::set_proof(const ::std::string& value) {
  
  proof_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Temple.proof)
}
#if LANG_CXX11
inline void Temple::set_proof(::std::string&& value) {
  
  proof_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Temple.proof)
}
#endif
inline void Temple::set_proof(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  proof_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Temple.proof)
}
inline void Temple::set_proof(const char* value, size_t size) {
  
  proof_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Temple.proof)
}
inline ::std::string* Temple::mutable_proof() {
  
  // @@protoc_insertion_point(field_mutable:Temple.proof)
  return proof_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Temple::release_proof() {
  // @@protoc_insertion_point(field_release:Temple.proof)
  
  return proof_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Temple::set_allocated_proof(::std::string* proof) {
  if (proof != nullptr) {
    
  } else {
    
  }
  proof_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), proof);
  // @@protoc_insertion_point(field_set_allocated:Temple.proof)
}

// bool approved = 9;
inline void Temple::clear_approved() {
  approved_ = false;
}
inline bool Temple::approved() const {
  // @@protoc_insertion_point(field_get:Temple.approved)
  return approved_;
}
inline void Temple::set_approved(bool value) {
  
  approved_ = value;
  // @@protoc_insertion_point(field_set:Temple.approved)
}

// -------------------------------------------------------------------

// TempleMaster

// string templeid = 1;
inline void TempleMaster::clear_templeid() {
  templeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TempleMaster::templeid() const {
  // @@protoc_insertion_point(field_get:TempleMaster.templeid)
  return templeid_.GetNoArena();
}
inline void TempleMaster::set_templeid(const ::std::string& value) {
  
  templeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TempleMaster.templeid)
}
#if LANG_CXX11
inline void TempleMaster::set_templeid(::std::string&& value) {
  
  templeid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TempleMaster.templeid)
}
#endif
inline void TempleMaster::set_templeid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  templeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TempleMaster.templeid)
}
inline void TempleMaster::set_templeid(const char* value, size_t size) {
  
  templeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TempleMaster.templeid)
}
inline ::std::string* TempleMaster::mutable_templeid() {
  
  // @@protoc_insertion_point(field_mutable:TempleMaster.templeid)
  return templeid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TempleMaster::release_templeid() {
  // @@protoc_insertion_point(field_release:TempleMaster.templeid)
  
  return templeid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TempleMaster::set_allocated_templeid(::std::string* templeid) {
  if (templeid != nullptr) {
    
  } else {
    
  }
  templeid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), templeid);
  // @@protoc_insertion_point(field_set_allocated:TempleMaster.templeid)
}

// string masterid = 2;
inline void TempleMaster::clear_masterid() {
  masterid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TempleMaster::masterid() const {
  // @@protoc_insertion_point(field_get:TempleMaster.masterid)
  return masterid_.GetNoArena();
}
inline void TempleMaster::set_masterid(const ::std::string& value) {
  
  masterid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TempleMaster.masterid)
}
#if LANG_CXX11
inline void TempleMaster::set_masterid(::std::string&& value) {
  
  masterid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TempleMaster.masterid)
}
#endif
inline void TempleMaster::set_masterid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  masterid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TempleMaster.masterid)
}
inline void TempleMaster::set_masterid(const char* value, size_t size) {
  
  masterid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TempleMaster.masterid)
}
inline ::std::string* TempleMaster::mutable_masterid() {
  
  // @@protoc_insertion_point(field_mutable:TempleMaster.masterid)
  return masterid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TempleMaster::release_masterid() {
  // @@protoc_insertion_point(field_release:TempleMaster.masterid)
  
  return masterid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TempleMaster::set_allocated_masterid(::std::string* masterid) {
  if (masterid != nullptr) {
    
  } else {
    
  }
  masterid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), masterid);
  // @@protoc_insertion_point(field_set_allocated:TempleMaster.masterid)
}

// bool approved = 3;
inline void TempleMaster::clear_approved() {
  approved_ = false;
}
inline bool TempleMaster::approved() const {
  // @@protoc_insertion_point(field_get:TempleMaster.approved)
  return approved_;
}
inline void TempleMaster::set_approved(bool value) {
  
  approved_ = value;
  // @@protoc_insertion_point(field_set:TempleMaster.approved)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_temple_2eproto
