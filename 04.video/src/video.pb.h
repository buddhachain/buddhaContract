// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: video.proto

#ifndef PROTOBUF_INCLUDED_video_2eproto
#define PROTOBUF_INCLUDED_video_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_video_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_video_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
namespace video {
class Fend;
class FendDefaultTypeInternal;
extern FendDefaultTypeInternal _Fend_default_instance_;
class FendLog;
class FendLogDefaultTypeInternal;
extern FendLogDefaultTypeInternal _FendLog_default_instance_;
class Focus;
class FocusDefaultTypeInternal;
extern FocusDefaultTypeInternal _Focus_default_instance_;
class Room;
class RoomDefaultTypeInternal;
extern RoomDefaultTypeInternal _Room_default_instance_;
}  // namespace video
namespace google {
namespace protobuf {
template<> ::video::Fend* Arena::CreateMaybeMessage<::video::Fend>(Arena*);
template<> ::video::FendLog* Arena::CreateMaybeMessage<::video::FendLog>(Arena*);
template<> ::video::Focus* Arena::CreateMaybeMessage<::video::Focus>(Arena*);
template<> ::video::Room* Arena::CreateMaybeMessage<::video::Room>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace video {

// ===================================================================

class Room :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:video.Room) */ {
 public:
  Room();
  virtual ~Room();

  Room(const Room& from);

  inline Room& operator=(const Room& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Room(Room&& from) noexcept
    : Room() {
    *this = ::std::move(from);
  }

  inline Room& operator=(Room&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const Room& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Room* internal_default_instance() {
    return reinterpret_cast<const Room*>(
               &_Room_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Room* other);
  friend void swap(Room& a, Room& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Room* New() const final {
    return CreateMaybeMessage<Room>(nullptr);
  }

  Room* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Room>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const Room& from);
  void MergeFrom(const Room& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Room* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string author_id = 2;
  void clear_author_id();
  static const int kAuthorIdFieldNumber = 2;
  const ::std::string& author_id() const;
  void set_author_id(const ::std::string& value);
  #if LANG_CXX11
  void set_author_id(::std::string&& value);
  #endif
  void set_author_id(const char* value);
  void set_author_id(const char* value, size_t size);
  ::std::string* mutable_author_id();
  ::std::string* release_author_id();
  void set_allocated_author_id(::std::string* author_id);

  // string title = 3;
  void clear_title();
  static const int kTitleFieldNumber = 3;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // string desc = 4;
  void clear_desc();
  static const int kDescFieldNumber = 4;
  const ::std::string& desc() const;
  void set_desc(const ::std::string& value);
  #if LANG_CXX11
  void set_desc(::std::string&& value);
  #endif
  void set_desc(const char* value);
  void set_desc(const char* value, size_t size);
  ::std::string* mutable_desc();
  ::std::string* release_desc();
  void set_allocated_desc(::std::string* desc);

  // string cover_hash = 5;
  void clear_cover_hash();
  static const int kCoverHashFieldNumber = 5;
  const ::std::string& cover_hash() const;
  void set_cover_hash(const ::std::string& value);
  #if LANG_CXX11
  void set_cover_hash(::std::string&& value);
  #endif
  void set_cover_hash(const char* value);
  void set_cover_hash(const char* value, size_t size);
  ::std::string* mutable_cover_hash();
  ::std::string* release_cover_hash();
  void set_allocated_cover_hash(::std::string* cover_hash);

  // string start_timestamp = 10;
  void clear_start_timestamp();
  static const int kStartTimestampFieldNumber = 10;
  const ::std::string& start_timestamp() const;
  void set_start_timestamp(const ::std::string& value);
  #if LANG_CXX11
  void set_start_timestamp(::std::string&& value);
  #endif
  void set_start_timestamp(const char* value);
  void set_start_timestamp(const char* value, size_t size);
  ::std::string* mutable_start_timestamp();
  ::std::string* release_start_timestamp();
  void set_allocated_start_timestamp(::std::string* start_timestamp);

  // string end_timestamp = 11;
  void clear_end_timestamp();
  static const int kEndTimestampFieldNumber = 11;
  const ::std::string& end_timestamp() const;
  void set_end_timestamp(const ::std::string& value);
  #if LANG_CXX11
  void set_end_timestamp(::std::string&& value);
  #endif
  void set_end_timestamp(const char* value);
  void set_end_timestamp(const char* value, size_t size);
  ::std::string* mutable_end_timestamp();
  ::std::string* release_end_timestamp();
  void set_allocated_end_timestamp(::std::string* end_timestamp);

  // int64 type = 6;
  void clear_type();
  static const int kTypeFieldNumber = 6;
  ::google::protobuf::int64 type() const;
  void set_type(::google::protobuf::int64 value);

  // int64 wish = 7;
  void clear_wish();
  static const int kWishFieldNumber = 7;
  ::google::protobuf::int64 wish() const;
  void set_wish(::google::protobuf::int64 value);

  // int64 audience_size = 8;
  void clear_audience_size();
  static const int kAudienceSizeFieldNumber = 8;
  ::google::protobuf::int64 audience_size() const;
  void set_audience_size(::google::protobuf::int64 value);

  // int64 focus_size = 9;
  void clear_focus_size();
  static const int kFocusSizeFieldNumber = 9;
  ::google::protobuf::int64 focus_size() const;
  void set_focus_size(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:video.Room)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr author_id_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr desc_;
  ::google::protobuf::internal::ArenaStringPtr cover_hash_;
  ::google::protobuf::internal::ArenaStringPtr start_timestamp_;
  ::google::protobuf::internal::ArenaStringPtr end_timestamp_;
  ::google::protobuf::int64 type_;
  ::google::protobuf::int64 wish_;
  ::google::protobuf::int64 audience_size_;
  ::google::protobuf::int64 focus_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_video_2eproto;
};
// -------------------------------------------------------------------

class Fend :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:video.Fend) */ {
 public:
  Fend();
  virtual ~Fend();

  Fend(const Fend& from);

  inline Fend& operator=(const Fend& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Fend(Fend&& from) noexcept
    : Fend() {
    *this = ::std::move(from);
  }

  inline Fend& operator=(Fend&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const Fend& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Fend* internal_default_instance() {
    return reinterpret_cast<const Fend*>(
               &_Fend_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Fend* other);
  friend void swap(Fend& a, Fend& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Fend* New() const final {
    return CreateMaybeMessage<Fend>(nullptr);
  }

  Fend* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Fend>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const Fend& from);
  void MergeFrom(const Fend& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Fend* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string author_id = 2;
  void clear_author_id();
  static const int kAuthorIdFieldNumber = 2;
  const ::std::string& author_id() const;
  void set_author_id(const ::std::string& value);
  #if LANG_CXX11
  void set_author_id(::std::string&& value);
  #endif
  void set_author_id(const char* value);
  void set_author_id(const char* value, size_t size);
  ::std::string* mutable_author_id();
  ::std::string* release_author_id();
  void set_allocated_author_id(::std::string* author_id);

  // string room_id = 3;
  void clear_room_id();
  static const int kRoomIdFieldNumber = 3;
  const ::std::string& room_id() const;
  void set_room_id(const ::std::string& value);
  #if LANG_CXX11
  void set_room_id(::std::string&& value);
  #endif
  void set_room_id(const char* value);
  void set_room_id(const char* value, size_t size);
  ::std::string* mutable_room_id();
  ::std::string* release_room_id();
  void set_allocated_room_id(::std::string* room_id);

  // string audience_id = 4;
  void clear_audience_id();
  static const int kAudienceIdFieldNumber = 4;
  const ::std::string& audience_id() const;
  void set_audience_id(const ::std::string& value);
  #if LANG_CXX11
  void set_audience_id(::std::string&& value);
  #endif
  void set_audience_id(const char* value);
  void set_audience_id(const char* value, size_t size);
  ::std::string* mutable_audience_id();
  ::std::string* release_audience_id();
  void set_allocated_audience_id(::std::string* audience_id);

  // int64 value = 5;
  void clear_value();
  static const int kValueFieldNumber = 5;
  ::google::protobuf::int64 value() const;
  void set_value(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:video.Fend)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr author_id_;
  ::google::protobuf::internal::ArenaStringPtr room_id_;
  ::google::protobuf::internal::ArenaStringPtr audience_id_;
  ::google::protobuf::int64 value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_video_2eproto;
};
// -------------------------------------------------------------------

class FendLog :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:video.FendLog) */ {
 public:
  FendLog();
  virtual ~FendLog();

  FendLog(const FendLog& from);

  inline FendLog& operator=(const FendLog& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FendLog(FendLog&& from) noexcept
    : FendLog() {
    *this = ::std::move(from);
  }

  inline FendLog& operator=(FendLog&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const FendLog& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FendLog* internal_default_instance() {
    return reinterpret_cast<const FendLog*>(
               &_FendLog_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(FendLog* other);
  friend void swap(FendLog& a, FendLog& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FendLog* New() const final {
    return CreateMaybeMessage<FendLog>(nullptr);
  }

  FendLog* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FendLog>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const FendLog& from);
  void MergeFrom(const FendLog& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FendLog* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string fend_id = 2;
  void clear_fend_id();
  static const int kFendIdFieldNumber = 2;
  const ::std::string& fend_id() const;
  void set_fend_id(const ::std::string& value);
  #if LANG_CXX11
  void set_fend_id(::std::string&& value);
  #endif
  void set_fend_id(const char* value);
  void set_fend_id(const char* value, size_t size);
  ::std::string* mutable_fend_id();
  ::std::string* release_fend_id();
  void set_allocated_fend_id(::std::string* fend_id);

  // string room_id = 3;
  void clear_room_id();
  static const int kRoomIdFieldNumber = 3;
  const ::std::string& room_id() const;
  void set_room_id(const ::std::string& value);
  #if LANG_CXX11
  void set_room_id(::std::string&& value);
  #endif
  void set_room_id(const char* value);
  void set_room_id(const char* value, size_t size);
  ::std::string* mutable_room_id();
  ::std::string* release_room_id();
  void set_allocated_room_id(::std::string* room_id);

  // string audience_id = 4;
  void clear_audience_id();
  static const int kAudienceIdFieldNumber = 4;
  const ::std::string& audience_id() const;
  void set_audience_id(const ::std::string& value);
  #if LANG_CXX11
  void set_audience_id(::std::string&& value);
  #endif
  void set_audience_id(const char* value);
  void set_audience_id(const char* value, size_t size);
  ::std::string* mutable_audience_id();
  ::std::string* release_audience_id();
  void set_allocated_audience_id(::std::string* audience_id);

  // string goods_id = 5;
  void clear_goods_id();
  static const int kGoodsIdFieldNumber = 5;
  const ::std::string& goods_id() const;
  void set_goods_id(const ::std::string& value);
  #if LANG_CXX11
  void set_goods_id(::std::string&& value);
  #endif
  void set_goods_id(const char* value);
  void set_goods_id(const char* value, size_t size);
  ::std::string* mutable_goods_id();
  ::std::string* release_goods_id();
  void set_allocated_goods_id(::std::string* goods_id);

  // string timestamp = 8;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 8;
  const ::std::string& timestamp() const;
  void set_timestamp(const ::std::string& value);
  #if LANG_CXX11
  void set_timestamp(::std::string&& value);
  #endif
  void set_timestamp(const char* value);
  void set_timestamp(const char* value, size_t size);
  ::std::string* mutable_timestamp();
  ::std::string* release_timestamp();
  void set_allocated_timestamp(::std::string* timestamp);

  // int64 goods_size = 6;
  void clear_goods_size();
  static const int kGoodsSizeFieldNumber = 6;
  ::google::protobuf::int64 goods_size() const;
  void set_goods_size(::google::protobuf::int64 value);

  // int64 value = 7;
  void clear_value();
  static const int kValueFieldNumber = 7;
  ::google::protobuf::int64 value() const;
  void set_value(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:video.FendLog)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr fend_id_;
  ::google::protobuf::internal::ArenaStringPtr room_id_;
  ::google::protobuf::internal::ArenaStringPtr audience_id_;
  ::google::protobuf::internal::ArenaStringPtr goods_id_;
  ::google::protobuf::internal::ArenaStringPtr timestamp_;
  ::google::protobuf::int64 goods_size_;
  ::google::protobuf::int64 value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_video_2eproto;
};
// -------------------------------------------------------------------

class Focus :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:video.Focus) */ {
 public:
  Focus();
  virtual ~Focus();

  Focus(const Focus& from);

  inline Focus& operator=(const Focus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Focus(Focus&& from) noexcept
    : Focus() {
    *this = ::std::move(from);
  }

  inline Focus& operator=(Focus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const Focus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Focus* internal_default_instance() {
    return reinterpret_cast<const Focus*>(
               &_Focus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Focus* other);
  friend void swap(Focus& a, Focus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Focus* New() const final {
    return CreateMaybeMessage<Focus>(nullptr);
  }

  Focus* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Focus>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const Focus& from);
  void MergeFrom(const Focus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Focus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string room_id = 1;
  void clear_room_id();
  static const int kRoomIdFieldNumber = 1;
  const ::std::string& room_id() const;
  void set_room_id(const ::std::string& value);
  #if LANG_CXX11
  void set_room_id(::std::string&& value);
  #endif
  void set_room_id(const char* value);
  void set_room_id(const char* value, size_t size);
  ::std::string* mutable_room_id();
  ::std::string* release_room_id();
  void set_allocated_room_id(::std::string* room_id);

  // string audience_id = 2;
  void clear_audience_id();
  static const int kAudienceIdFieldNumber = 2;
  const ::std::string& audience_id() const;
  void set_audience_id(const ::std::string& value);
  #if LANG_CXX11
  void set_audience_id(::std::string&& value);
  #endif
  void set_audience_id(const char* value);
  void set_audience_id(const char* value, size_t size);
  ::std::string* mutable_audience_id();
  ::std::string* release_audience_id();
  void set_allocated_audience_id(::std::string* audience_id);

  // string timestamp = 3;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 3;
  const ::std::string& timestamp() const;
  void set_timestamp(const ::std::string& value);
  #if LANG_CXX11
  void set_timestamp(::std::string&& value);
  #endif
  void set_timestamp(const char* value);
  void set_timestamp(const char* value, size_t size);
  ::std::string* mutable_timestamp();
  ::std::string* release_timestamp();
  void set_allocated_timestamp(::std::string* timestamp);

  // @@protoc_insertion_point(class_scope:video.Focus)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr room_id_;
  ::google::protobuf::internal::ArenaStringPtr audience_id_;
  ::google::protobuf::internal::ArenaStringPtr timestamp_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_video_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Room

// string id = 1;
inline void Room::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Room::id() const {
  // @@protoc_insertion_point(field_get:video.Room.id)
  return id_.GetNoArena();
}
inline void Room::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:video.Room.id)
}
#if LANG_CXX11
inline void Room::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:video.Room.id)
}
#endif
inline void Room::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:video.Room.id)
}
inline void Room::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:video.Room.id)
}
inline ::std::string* Room::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:video.Room.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Room::release_id() {
  // @@protoc_insertion_point(field_release:video.Room.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Room::set_allocated_id(::std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:video.Room.id)
}

// string author_id = 2;
inline void Room::clear_author_id() {
  author_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Room::author_id() const {
  // @@protoc_insertion_point(field_get:video.Room.author_id)
  return author_id_.GetNoArena();
}
inline void Room::set_author_id(const ::std::string& value) {
  
  author_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:video.Room.author_id)
}
#if LANG_CXX11
inline void Room::set_author_id(::std::string&& value) {
  
  author_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:video.Room.author_id)
}
#endif
inline void Room::set_author_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  author_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:video.Room.author_id)
}
inline void Room::set_author_id(const char* value, size_t size) {
  
  author_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:video.Room.author_id)
}
inline ::std::string* Room::mutable_author_id() {
  
  // @@protoc_insertion_point(field_mutable:video.Room.author_id)
  return author_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Room::release_author_id() {
  // @@protoc_insertion_point(field_release:video.Room.author_id)
  
  return author_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Room::set_allocated_author_id(::std::string* author_id) {
  if (author_id != nullptr) {
    
  } else {
    
  }
  author_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), author_id);
  // @@protoc_insertion_point(field_set_allocated:video.Room.author_id)
}

// string title = 3;
inline void Room::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Room::title() const {
  // @@protoc_insertion_point(field_get:video.Room.title)
  return title_.GetNoArena();
}
inline void Room::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:video.Room.title)
}
#if LANG_CXX11
inline void Room::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:video.Room.title)
}
#endif
inline void Room::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:video.Room.title)
}
inline void Room::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:video.Room.title)
}
inline ::std::string* Room::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:video.Room.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Room::release_title() {
  // @@protoc_insertion_point(field_release:video.Room.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Room::set_allocated_title(::std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:video.Room.title)
}

// string desc = 4;
inline void Room::clear_desc() {
  desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Room::desc() const {
  // @@protoc_insertion_point(field_get:video.Room.desc)
  return desc_.GetNoArena();
}
inline void Room::set_desc(const ::std::string& value) {
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:video.Room.desc)
}
#if LANG_CXX11
inline void Room::set_desc(::std::string&& value) {
  
  desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:video.Room.desc)
}
#endif
inline void Room::set_desc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:video.Room.desc)
}
inline void Room::set_desc(const char* value, size_t size) {
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:video.Room.desc)
}
inline ::std::string* Room::mutable_desc() {
  
  // @@protoc_insertion_point(field_mutable:video.Room.desc)
  return desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Room::release_desc() {
  // @@protoc_insertion_point(field_release:video.Room.desc)
  
  return desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Room::set_allocated_desc(::std::string* desc) {
  if (desc != nullptr) {
    
  } else {
    
  }
  desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:video.Room.desc)
}

// string cover_hash = 5;
inline void Room::clear_cover_hash() {
  cover_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Room::cover_hash() const {
  // @@protoc_insertion_point(field_get:video.Room.cover_hash)
  return cover_hash_.GetNoArena();
}
inline void Room::set_cover_hash(const ::std::string& value) {
  
  cover_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:video.Room.cover_hash)
}
#if LANG_CXX11
inline void Room::set_cover_hash(::std::string&& value) {
  
  cover_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:video.Room.cover_hash)
}
#endif
inline void Room::set_cover_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cover_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:video.Room.cover_hash)
}
inline void Room::set_cover_hash(const char* value, size_t size) {
  
  cover_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:video.Room.cover_hash)
}
inline ::std::string* Room::mutable_cover_hash() {
  
  // @@protoc_insertion_point(field_mutable:video.Room.cover_hash)
  return cover_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Room::release_cover_hash() {
  // @@protoc_insertion_point(field_release:video.Room.cover_hash)
  
  return cover_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Room::set_allocated_cover_hash(::std::string* cover_hash) {
  if (cover_hash != nullptr) {
    
  } else {
    
  }
  cover_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cover_hash);
  // @@protoc_insertion_point(field_set_allocated:video.Room.cover_hash)
}

// int64 type = 6;
inline void Room::clear_type() {
  type_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 Room::type() const {
  // @@protoc_insertion_point(field_get:video.Room.type)
  return type_;
}
inline void Room::set_type(::google::protobuf::int64 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:video.Room.type)
}

// int64 wish = 7;
inline void Room::clear_wish() {
  wish_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 Room::wish() const {
  // @@protoc_insertion_point(field_get:video.Room.wish)
  return wish_;
}
inline void Room::set_wish(::google::protobuf::int64 value) {
  
  wish_ = value;
  // @@protoc_insertion_point(field_set:video.Room.wish)
}

// int64 audience_size = 8;
inline void Room::clear_audience_size() {
  audience_size_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 Room::audience_size() const {
  // @@protoc_insertion_point(field_get:video.Room.audience_size)
  return audience_size_;
}
inline void Room::set_audience_size(::google::protobuf::int64 value) {
  
  audience_size_ = value;
  // @@protoc_insertion_point(field_set:video.Room.audience_size)
}

// int64 focus_size = 9;
inline void Room::clear_focus_size() {
  focus_size_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 Room::focus_size() const {
  // @@protoc_insertion_point(field_get:video.Room.focus_size)
  return focus_size_;
}
inline void Room::set_focus_size(::google::protobuf::int64 value) {
  
  focus_size_ = value;
  // @@protoc_insertion_point(field_set:video.Room.focus_size)
}

// string start_timestamp = 10;
inline void Room::clear_start_timestamp() {
  start_timestamp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Room::start_timestamp() const {
  // @@protoc_insertion_point(field_get:video.Room.start_timestamp)
  return start_timestamp_.GetNoArena();
}
inline void Room::set_start_timestamp(const ::std::string& value) {
  
  start_timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:video.Room.start_timestamp)
}
#if LANG_CXX11
inline void Room::set_start_timestamp(::std::string&& value) {
  
  start_timestamp_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:video.Room.start_timestamp)
}
#endif
inline void Room::set_start_timestamp(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  start_timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:video.Room.start_timestamp)
}
inline void Room::set_start_timestamp(const char* value, size_t size) {
  
  start_timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:video.Room.start_timestamp)
}
inline ::std::string* Room::mutable_start_timestamp() {
  
  // @@protoc_insertion_point(field_mutable:video.Room.start_timestamp)
  return start_timestamp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Room::release_start_timestamp() {
  // @@protoc_insertion_point(field_release:video.Room.start_timestamp)
  
  return start_timestamp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Room::set_allocated_start_timestamp(::std::string* start_timestamp) {
  if (start_timestamp != nullptr) {
    
  } else {
    
  }
  start_timestamp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start_timestamp);
  // @@protoc_insertion_point(field_set_allocated:video.Room.start_timestamp)
}

// string end_timestamp = 11;
inline void Room::clear_end_timestamp() {
  end_timestamp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Room::end_timestamp() const {
  // @@protoc_insertion_point(field_get:video.Room.end_timestamp)
  return end_timestamp_.GetNoArena();
}
inline void Room::set_end_timestamp(const ::std::string& value) {
  
  end_timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:video.Room.end_timestamp)
}
#if LANG_CXX11
inline void Room::set_end_timestamp(::std::string&& value) {
  
  end_timestamp_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:video.Room.end_timestamp)
}
#endif
inline void Room::set_end_timestamp(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  end_timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:video.Room.end_timestamp)
}
inline void Room::set_end_timestamp(const char* value, size_t size) {
  
  end_timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:video.Room.end_timestamp)
}
inline ::std::string* Room::mutable_end_timestamp() {
  
  // @@protoc_insertion_point(field_mutable:video.Room.end_timestamp)
  return end_timestamp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Room::release_end_timestamp() {
  // @@protoc_insertion_point(field_release:video.Room.end_timestamp)
  
  return end_timestamp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Room::set_allocated_end_timestamp(::std::string* end_timestamp) {
  if (end_timestamp != nullptr) {
    
  } else {
    
  }
  end_timestamp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), end_timestamp);
  // @@protoc_insertion_point(field_set_allocated:video.Room.end_timestamp)
}

// -------------------------------------------------------------------

// Fend

// string id = 1;
inline void Fend::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Fend::id() const {
  // @@protoc_insertion_point(field_get:video.Fend.id)
  return id_.GetNoArena();
}
inline void Fend::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:video.Fend.id)
}
#if LANG_CXX11
inline void Fend::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:video.Fend.id)
}
#endif
inline void Fend::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:video.Fend.id)
}
inline void Fend::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:video.Fend.id)
}
inline ::std::string* Fend::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:video.Fend.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Fend::release_id() {
  // @@protoc_insertion_point(field_release:video.Fend.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Fend::set_allocated_id(::std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:video.Fend.id)
}

// string author_id = 2;
inline void Fend::clear_author_id() {
  author_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Fend::author_id() const {
  // @@protoc_insertion_point(field_get:video.Fend.author_id)
  return author_id_.GetNoArena();
}
inline void Fend::set_author_id(const ::std::string& value) {
  
  author_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:video.Fend.author_id)
}
#if LANG_CXX11
inline void Fend::set_author_id(::std::string&& value) {
  
  author_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:video.Fend.author_id)
}
#endif
inline void Fend::set_author_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  author_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:video.Fend.author_id)
}
inline void Fend::set_author_id(const char* value, size_t size) {
  
  author_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:video.Fend.author_id)
}
inline ::std::string* Fend::mutable_author_id() {
  
  // @@protoc_insertion_point(field_mutable:video.Fend.author_id)
  return author_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Fend::release_author_id() {
  // @@protoc_insertion_point(field_release:video.Fend.author_id)
  
  return author_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Fend::set_allocated_author_id(::std::string* author_id) {
  if (author_id != nullptr) {
    
  } else {
    
  }
  author_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), author_id);
  // @@protoc_insertion_point(field_set_allocated:video.Fend.author_id)
}

// string room_id = 3;
inline void Fend::clear_room_id() {
  room_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Fend::room_id() const {
  // @@protoc_insertion_point(field_get:video.Fend.room_id)
  return room_id_.GetNoArena();
}
inline void Fend::set_room_id(const ::std::string& value) {
  
  room_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:video.Fend.room_id)
}
#if LANG_CXX11
inline void Fend::set_room_id(::std::string&& value) {
  
  room_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:video.Fend.room_id)
}
#endif
inline void Fend::set_room_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  room_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:video.Fend.room_id)
}
inline void Fend::set_room_id(const char* value, size_t size) {
  
  room_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:video.Fend.room_id)
}
inline ::std::string* Fend::mutable_room_id() {
  
  // @@protoc_insertion_point(field_mutable:video.Fend.room_id)
  return room_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Fend::release_room_id() {
  // @@protoc_insertion_point(field_release:video.Fend.room_id)
  
  return room_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Fend::set_allocated_room_id(::std::string* room_id) {
  if (room_id != nullptr) {
    
  } else {
    
  }
  room_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), room_id);
  // @@protoc_insertion_point(field_set_allocated:video.Fend.room_id)
}

// string audience_id = 4;
inline void Fend::clear_audience_id() {
  audience_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Fend::audience_id() const {
  // @@protoc_insertion_point(field_get:video.Fend.audience_id)
  return audience_id_.GetNoArena();
}
inline void Fend::set_audience_id(const ::std::string& value) {
  
  audience_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:video.Fend.audience_id)
}
#if LANG_CXX11
inline void Fend::set_audience_id(::std::string&& value) {
  
  audience_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:video.Fend.audience_id)
}
#endif
inline void Fend::set_audience_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  audience_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:video.Fend.audience_id)
}
inline void Fend::set_audience_id(const char* value, size_t size) {
  
  audience_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:video.Fend.audience_id)
}
inline ::std::string* Fend::mutable_audience_id() {
  
  // @@protoc_insertion_point(field_mutable:video.Fend.audience_id)
  return audience_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Fend::release_audience_id() {
  // @@protoc_insertion_point(field_release:video.Fend.audience_id)
  
  return audience_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Fend::set_allocated_audience_id(::std::string* audience_id) {
  if (audience_id != nullptr) {
    
  } else {
    
  }
  audience_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), audience_id);
  // @@protoc_insertion_point(field_set_allocated:video.Fend.audience_id)
}

// int64 value = 5;
inline void Fend::clear_value() {
  value_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 Fend::value() const {
  // @@protoc_insertion_point(field_get:video.Fend.value)
  return value_;
}
inline void Fend::set_value(::google::protobuf::int64 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:video.Fend.value)
}

// -------------------------------------------------------------------

// FendLog

// string id = 1;
inline void FendLog::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FendLog::id() const {
  // @@protoc_insertion_point(field_get:video.FendLog.id)
  return id_.GetNoArena();
}
inline void FendLog::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:video.FendLog.id)
}
#if LANG_CXX11
inline void FendLog::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:video.FendLog.id)
}
#endif
inline void FendLog::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:video.FendLog.id)
}
inline void FendLog::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:video.FendLog.id)
}
inline ::std::string* FendLog::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:video.FendLog.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FendLog::release_id() {
  // @@protoc_insertion_point(field_release:video.FendLog.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FendLog::set_allocated_id(::std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:video.FendLog.id)
}

// string fend_id = 2;
inline void FendLog::clear_fend_id() {
  fend_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FendLog::fend_id() const {
  // @@protoc_insertion_point(field_get:video.FendLog.fend_id)
  return fend_id_.GetNoArena();
}
inline void FendLog::set_fend_id(const ::std::string& value) {
  
  fend_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:video.FendLog.fend_id)
}
#if LANG_CXX11
inline void FendLog::set_fend_id(::std::string&& value) {
  
  fend_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:video.FendLog.fend_id)
}
#endif
inline void FendLog::set_fend_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fend_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:video.FendLog.fend_id)
}
inline void FendLog::set_fend_id(const char* value, size_t size) {
  
  fend_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:video.FendLog.fend_id)
}
inline ::std::string* FendLog::mutable_fend_id() {
  
  // @@protoc_insertion_point(field_mutable:video.FendLog.fend_id)
  return fend_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FendLog::release_fend_id() {
  // @@protoc_insertion_point(field_release:video.FendLog.fend_id)
  
  return fend_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FendLog::set_allocated_fend_id(::std::string* fend_id) {
  if (fend_id != nullptr) {
    
  } else {
    
  }
  fend_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fend_id);
  // @@protoc_insertion_point(field_set_allocated:video.FendLog.fend_id)
}

// string room_id = 3;
inline void FendLog::clear_room_id() {
  room_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FendLog::room_id() const {
  // @@protoc_insertion_point(field_get:video.FendLog.room_id)
  return room_id_.GetNoArena();
}
inline void FendLog::set_room_id(const ::std::string& value) {
  
  room_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:video.FendLog.room_id)
}
#if LANG_CXX11
inline void FendLog::set_room_id(::std::string&& value) {
  
  room_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:video.FendLog.room_id)
}
#endif
inline void FendLog::set_room_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  room_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:video.FendLog.room_id)
}
inline void FendLog::set_room_id(const char* value, size_t size) {
  
  room_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:video.FendLog.room_id)
}
inline ::std::string* FendLog::mutable_room_id() {
  
  // @@protoc_insertion_point(field_mutable:video.FendLog.room_id)
  return room_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FendLog::release_room_id() {
  // @@protoc_insertion_point(field_release:video.FendLog.room_id)
  
  return room_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FendLog::set_allocated_room_id(::std::string* room_id) {
  if (room_id != nullptr) {
    
  } else {
    
  }
  room_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), room_id);
  // @@protoc_insertion_point(field_set_allocated:video.FendLog.room_id)
}

// string audience_id = 4;
inline void FendLog::clear_audience_id() {
  audience_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FendLog::audience_id() const {
  // @@protoc_insertion_point(field_get:video.FendLog.audience_id)
  return audience_id_.GetNoArena();
}
inline void FendLog::set_audience_id(const ::std::string& value) {
  
  audience_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:video.FendLog.audience_id)
}
#if LANG_CXX11
inline void FendLog::set_audience_id(::std::string&& value) {
  
  audience_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:video.FendLog.audience_id)
}
#endif
inline void FendLog::set_audience_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  audience_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:video.FendLog.audience_id)
}
inline void FendLog::set_audience_id(const char* value, size_t size) {
  
  audience_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:video.FendLog.audience_id)
}
inline ::std::string* FendLog::mutable_audience_id() {
  
  // @@protoc_insertion_point(field_mutable:video.FendLog.audience_id)
  return audience_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FendLog::release_audience_id() {
  // @@protoc_insertion_point(field_release:video.FendLog.audience_id)
  
  return audience_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FendLog::set_allocated_audience_id(::std::string* audience_id) {
  if (audience_id != nullptr) {
    
  } else {
    
  }
  audience_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), audience_id);
  // @@protoc_insertion_point(field_set_allocated:video.FendLog.audience_id)
}

// string goods_id = 5;
inline void FendLog::clear_goods_id() {
  goods_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FendLog::goods_id() const {
  // @@protoc_insertion_point(field_get:video.FendLog.goods_id)
  return goods_id_.GetNoArena();
}
inline void FendLog::set_goods_id(const ::std::string& value) {
  
  goods_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:video.FendLog.goods_id)
}
#if LANG_CXX11
inline void FendLog::set_goods_id(::std::string&& value) {
  
  goods_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:video.FendLog.goods_id)
}
#endif
inline void FendLog::set_goods_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  goods_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:video.FendLog.goods_id)
}
inline void FendLog::set_goods_id(const char* value, size_t size) {
  
  goods_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:video.FendLog.goods_id)
}
inline ::std::string* FendLog::mutable_goods_id() {
  
  // @@protoc_insertion_point(field_mutable:video.FendLog.goods_id)
  return goods_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FendLog::release_goods_id() {
  // @@protoc_insertion_point(field_release:video.FendLog.goods_id)
  
  return goods_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FendLog::set_allocated_goods_id(::std::string* goods_id) {
  if (goods_id != nullptr) {
    
  } else {
    
  }
  goods_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), goods_id);
  // @@protoc_insertion_point(field_set_allocated:video.FendLog.goods_id)
}

// int64 goods_size = 6;
inline void FendLog::clear_goods_size() {
  goods_size_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 FendLog::goods_size() const {
  // @@protoc_insertion_point(field_get:video.FendLog.goods_size)
  return goods_size_;
}
inline void FendLog::set_goods_size(::google::protobuf::int64 value) {
  
  goods_size_ = value;
  // @@protoc_insertion_point(field_set:video.FendLog.goods_size)
}

// int64 value = 7;
inline void FendLog::clear_value() {
  value_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 FendLog::value() const {
  // @@protoc_insertion_point(field_get:video.FendLog.value)
  return value_;
}
inline void FendLog::set_value(::google::protobuf::int64 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:video.FendLog.value)
}

// string timestamp = 8;
inline void FendLog::clear_timestamp() {
  timestamp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FendLog::timestamp() const {
  // @@protoc_insertion_point(field_get:video.FendLog.timestamp)
  return timestamp_.GetNoArena();
}
inline void FendLog::set_timestamp(const ::std::string& value) {
  
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:video.FendLog.timestamp)
}
#if LANG_CXX11
inline void FendLog::set_timestamp(::std::string&& value) {
  
  timestamp_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:video.FendLog.timestamp)
}
#endif
inline void FendLog::set_timestamp(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:video.FendLog.timestamp)
}
inline void FendLog::set_timestamp(const char* value, size_t size) {
  
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:video.FendLog.timestamp)
}
inline ::std::string* FendLog::mutable_timestamp() {
  
  // @@protoc_insertion_point(field_mutable:video.FendLog.timestamp)
  return timestamp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FendLog::release_timestamp() {
  // @@protoc_insertion_point(field_release:video.FendLog.timestamp)
  
  return timestamp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FendLog::set_allocated_timestamp(::std::string* timestamp) {
  if (timestamp != nullptr) {
    
  } else {
    
  }
  timestamp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timestamp);
  // @@protoc_insertion_point(field_set_allocated:video.FendLog.timestamp)
}

// -------------------------------------------------------------------

// Focus

// string room_id = 1;
inline void Focus::clear_room_id() {
  room_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Focus::room_id() const {
  // @@protoc_insertion_point(field_get:video.Focus.room_id)
  return room_id_.GetNoArena();
}
inline void Focus::set_room_id(const ::std::string& value) {
  
  room_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:video.Focus.room_id)
}
#if LANG_CXX11
inline void Focus::set_room_id(::std::string&& value) {
  
  room_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:video.Focus.room_id)
}
#endif
inline void Focus::set_room_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  room_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:video.Focus.room_id)
}
inline void Focus::set_room_id(const char* value, size_t size) {
  
  room_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:video.Focus.room_id)
}
inline ::std::string* Focus::mutable_room_id() {
  
  // @@protoc_insertion_point(field_mutable:video.Focus.room_id)
  return room_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Focus::release_room_id() {
  // @@protoc_insertion_point(field_release:video.Focus.room_id)
  
  return room_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Focus::set_allocated_room_id(::std::string* room_id) {
  if (room_id != nullptr) {
    
  } else {
    
  }
  room_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), room_id);
  // @@protoc_insertion_point(field_set_allocated:video.Focus.room_id)
}

// string audience_id = 2;
inline void Focus::clear_audience_id() {
  audience_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Focus::audience_id() const {
  // @@protoc_insertion_point(field_get:video.Focus.audience_id)
  return audience_id_.GetNoArena();
}
inline void Focus::set_audience_id(const ::std::string& value) {
  
  audience_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:video.Focus.audience_id)
}
#if LANG_CXX11
inline void Focus::set_audience_id(::std::string&& value) {
  
  audience_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:video.Focus.audience_id)
}
#endif
inline void Focus::set_audience_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  audience_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:video.Focus.audience_id)
}
inline void Focus::set_audience_id(const char* value, size_t size) {
  
  audience_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:video.Focus.audience_id)
}
inline ::std::string* Focus::mutable_audience_id() {
  
  // @@protoc_insertion_point(field_mutable:video.Focus.audience_id)
  return audience_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Focus::release_audience_id() {
  // @@protoc_insertion_point(field_release:video.Focus.audience_id)
  
  return audience_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Focus::set_allocated_audience_id(::std::string* audience_id) {
  if (audience_id != nullptr) {
    
  } else {
    
  }
  audience_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), audience_id);
  // @@protoc_insertion_point(field_set_allocated:video.Focus.audience_id)
}

// string timestamp = 3;
inline void Focus::clear_timestamp() {
  timestamp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Focus::timestamp() const {
  // @@protoc_insertion_point(field_get:video.Focus.timestamp)
  return timestamp_.GetNoArena();
}
inline void Focus::set_timestamp(const ::std::string& value) {
  
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:video.Focus.timestamp)
}
#if LANG_CXX11
inline void Focus::set_timestamp(::std::string&& value) {
  
  timestamp_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:video.Focus.timestamp)
}
#endif
inline void Focus::set_timestamp(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:video.Focus.timestamp)
}
inline void Focus::set_timestamp(const char* value, size_t size) {
  
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:video.Focus.timestamp)
}
inline ::std::string* Focus::mutable_timestamp() {
  
  // @@protoc_insertion_point(field_mutable:video.Focus.timestamp)
  return timestamp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Focus::release_timestamp() {
  // @@protoc_insertion_point(field_release:video.Focus.timestamp)
  
  return timestamp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Focus::set_allocated_timestamp(::std::string* timestamp) {
  if (timestamp != nullptr) {
    
  } else {
    
  }
  timestamp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timestamp);
  // @@protoc_insertion_point(field_set_allocated:video.Focus.timestamp)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace video

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_video_2eproto
