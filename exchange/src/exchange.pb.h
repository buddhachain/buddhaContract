// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: exchange.proto

#ifndef PROTOBUF_INCLUDED_exchange_2eproto
#define PROTOBUF_INCLUDED_exchange_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_exchange_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_exchange_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
namespace myexchange {
class Exchange;
class ExchangeDefaultTypeInternal;
extern ExchangeDefaultTypeInternal _Exchange_default_instance_;
class Order;
class OrderDefaultTypeInternal;
extern OrderDefaultTypeInternal _Order_default_instance_;
class Product;
class ProductDefaultTypeInternal;
extern ProductDefaultTypeInternal _Product_default_instance_;
}  // namespace myexchange
namespace google {
namespace protobuf {
template<> ::myexchange::Exchange* Arena::CreateMaybeMessage<::myexchange::Exchange>(Arena*);
template<> ::myexchange::Order* Arena::CreateMaybeMessage<::myexchange::Order>(Arena*);
template<> ::myexchange::Product* Arena::CreateMaybeMessage<::myexchange::Product>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace myexchange {

// ===================================================================

class Product :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:myexchange.Product) */ {
 public:
  Product();
  virtual ~Product();

  Product(const Product& from);

  inline Product& operator=(const Product& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Product(Product&& from) noexcept
    : Product() {
    *this = ::std::move(from);
  }

  inline Product& operator=(Product&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const Product& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Product* internal_default_instance() {
    return reinterpret_cast<const Product*>(
               &_Product_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Product* other);
  friend void swap(Product& a, Product& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Product* New() const final {
    return CreateMaybeMessage<Product>(nullptr);
  }

  Product* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Product>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const Product& from);
  void MergeFrom(const Product& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Product* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string desc = 3;
  void clear_desc();
  static const int kDescFieldNumber = 3;
  const ::std::string& desc() const;
  void set_desc(const ::std::string& value);
  #if LANG_CXX11
  void set_desc(::std::string&& value);
  #endif
  void set_desc(const char* value);
  void set_desc(const char* value, size_t size);
  ::std::string* mutable_desc();
  ::std::string* release_desc();
  void set_allocated_desc(::std::string* desc);

  // string time = 7;
  void clear_time();
  static const int kTimeFieldNumber = 7;
  const ::std::string& time() const;
  void set_time(const ::std::string& value);
  #if LANG_CXX11
  void set_time(::std::string&& value);
  #endif
  void set_time(const char* value);
  void set_time(const char* value, size_t size);
  ::std::string* mutable_time();
  ::std::string* release_time();
  void set_allocated_time(::std::string* time);

  // double price = 5;
  void clear_price();
  static const int kPriceFieldNumber = 5;
  double price() const;
  void set_price(double value);

  // int64 amount = 6;
  void clear_amount();
  static const int kAmountFieldNumber = 6;
  ::google::protobuf::int64 amount() const;
  void set_amount(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:myexchange.Product)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr desc_;
  ::google::protobuf::internal::ArenaStringPtr time_;
  double price_;
  ::google::protobuf::int64 amount_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_exchange_2eproto;
};
// -------------------------------------------------------------------

class Order :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:myexchange.Order) */ {
 public:
  Order();
  virtual ~Order();

  Order(const Order& from);

  inline Order& operator=(const Order& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Order(Order&& from) noexcept
    : Order() {
    *this = ::std::move(from);
  }

  inline Order& operator=(Order&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const Order& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Order* internal_default_instance() {
    return reinterpret_cast<const Order*>(
               &_Order_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Order* other);
  friend void swap(Order& a, Order& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Order* New() const final {
    return CreateMaybeMessage<Order>(nullptr);
  }

  Order* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Order>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const Order& from);
  void MergeFrom(const Order& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Order* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string productid = 2;
  void clear_productid();
  static const int kProductidFieldNumber = 2;
  const ::std::string& productid() const;
  void set_productid(const ::std::string& value);
  #if LANG_CXX11
  void set_productid(::std::string&& value);
  #endif
  void set_productid(const char* value);
  void set_productid(const char* value, size_t size);
  ::std::string* mutable_productid();
  ::std::string* release_productid();
  void set_allocated_productid(::std::string* productid);

  // string productname = 3;
  void clear_productname();
  static const int kProductnameFieldNumber = 3;
  const ::std::string& productname() const;
  void set_productname(const ::std::string& value);
  #if LANG_CXX11
  void set_productname(::std::string&& value);
  #endif
  void set_productname(const char* value);
  void set_productname(const char* value, size_t size);
  ::std::string* mutable_productname();
  ::std::string* release_productname();
  void set_allocated_productname(::std::string* productname);

  // string productdesc = 4;
  void clear_productdesc();
  static const int kProductdescFieldNumber = 4;
  const ::std::string& productdesc() const;
  void set_productdesc(const ::std::string& value);
  #if LANG_CXX11
  void set_productdesc(::std::string&& value);
  #endif
  void set_productdesc(const char* value);
  void set_productdesc(const char* value, size_t size);
  ::std::string* mutable_productdesc();
  ::std::string* release_productdesc();
  void set_allocated_productdesc(::std::string* productdesc);

  // double productprice = 5;
  void clear_productprice();
  static const int kProductpriceFieldNumber = 5;
  double productprice() const;
  void set_productprice(double value);

  // int64 productcount = 6;
  void clear_productcount();
  static const int kProductcountFieldNumber = 6;
  ::google::protobuf::int64 productcount() const;
  void set_productcount(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:myexchange.Order)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr productid_;
  ::google::protobuf::internal::ArenaStringPtr productname_;
  ::google::protobuf::internal::ArenaStringPtr productdesc_;
  double productprice_;
  ::google::protobuf::int64 productcount_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_exchange_2eproto;
};
// -------------------------------------------------------------------

class Exchange :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:myexchange.Exchange) */ {
 public:
  Exchange();
  virtual ~Exchange();

  Exchange(const Exchange& from);

  inline Exchange& operator=(const Exchange& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Exchange(Exchange&& from) noexcept
    : Exchange() {
    *this = ::std::move(from);
  }

  inline Exchange& operator=(Exchange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const Exchange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Exchange* internal_default_instance() {
    return reinterpret_cast<const Exchange*>(
               &_Exchange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Exchange* other);
  friend void swap(Exchange& a, Exchange& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Exchange* New() const final {
    return CreateMaybeMessage<Exchange>(nullptr);
  }

  Exchange* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Exchange>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const Exchange& from);
  void MergeFrom(const Exchange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Exchange* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string orderid = 1;
  void clear_orderid();
  static const int kOrderidFieldNumber = 1;
  const ::std::string& orderid() const;
  void set_orderid(const ::std::string& value);
  #if LANG_CXX11
  void set_orderid(::std::string&& value);
  #endif
  void set_orderid(const char* value);
  void set_orderid(const char* value, size_t size);
  ::std::string* mutable_orderid();
  ::std::string* release_orderid();
  void set_allocated_orderid(::std::string* orderid);

  // string products = 2;
  void clear_products();
  static const int kProductsFieldNumber = 2;
  const ::std::string& products() const;
  void set_products(const ::std::string& value);
  #if LANG_CXX11
  void set_products(::std::string&& value);
  #endif
  void set_products(const char* value);
  void set_products(const char* value, size_t size);
  ::std::string* mutable_products();
  ::std::string* release_products();
  void set_allocated_products(::std::string* products);

  // string time = 4;
  void clear_time();
  static const int kTimeFieldNumber = 4;
  const ::std::string& time() const;
  void set_time(const ::std::string& value);
  #if LANG_CXX11
  void set_time(::std::string&& value);
  #endif
  void set_time(const char* value);
  void set_time(const char* value, size_t size);
  ::std::string* mutable_time();
  ::std::string* release_time();
  void set_allocated_time(::std::string* time);

  // double price = 3;
  void clear_price();
  static const int kPriceFieldNumber = 3;
  double price() const;
  void set_price(double value);

  // @@protoc_insertion_point(class_scope:myexchange.Exchange)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr orderid_;
  ::google::protobuf::internal::ArenaStringPtr products_;
  ::google::protobuf::internal::ArenaStringPtr time_;
  double price_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_exchange_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Product

// string id = 1;
inline void Product::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Product::id() const {
  // @@protoc_insertion_point(field_get:myexchange.Product.id)
  return id_.GetNoArena();
}
inline void Product::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:myexchange.Product.id)
}
#if LANG_CXX11
inline void Product::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:myexchange.Product.id)
}
#endif
inline void Product::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:myexchange.Product.id)
}
inline void Product::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:myexchange.Product.id)
}
inline ::std::string* Product::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:myexchange.Product.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Product::release_id() {
  // @@protoc_insertion_point(field_release:myexchange.Product.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Product::set_allocated_id(::std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:myexchange.Product.id)
}

// string name = 2;
inline void Product::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Product::name() const {
  // @@protoc_insertion_point(field_get:myexchange.Product.name)
  return name_.GetNoArena();
}
inline void Product::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:myexchange.Product.name)
}
#if LANG_CXX11
inline void Product::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:myexchange.Product.name)
}
#endif
inline void Product::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:myexchange.Product.name)
}
inline void Product::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:myexchange.Product.name)
}
inline ::std::string* Product::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:myexchange.Product.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Product::release_name() {
  // @@protoc_insertion_point(field_release:myexchange.Product.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Product::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:myexchange.Product.name)
}

// string desc = 3;
inline void Product::clear_desc() {
  desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Product::desc() const {
  // @@protoc_insertion_point(field_get:myexchange.Product.desc)
  return desc_.GetNoArena();
}
inline void Product::set_desc(const ::std::string& value) {
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:myexchange.Product.desc)
}
#if LANG_CXX11
inline void Product::set_desc(::std::string&& value) {
  
  desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:myexchange.Product.desc)
}
#endif
inline void Product::set_desc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:myexchange.Product.desc)
}
inline void Product::set_desc(const char* value, size_t size) {
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:myexchange.Product.desc)
}
inline ::std::string* Product::mutable_desc() {
  
  // @@protoc_insertion_point(field_mutable:myexchange.Product.desc)
  return desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Product::release_desc() {
  // @@protoc_insertion_point(field_release:myexchange.Product.desc)
  
  return desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Product::set_allocated_desc(::std::string* desc) {
  if (desc != nullptr) {
    
  } else {
    
  }
  desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:myexchange.Product.desc)
}

// double price = 5;
inline void Product::clear_price() {
  price_ = 0;
}
inline double Product::price() const {
  // @@protoc_insertion_point(field_get:myexchange.Product.price)
  return price_;
}
inline void Product::set_price(double value) {
  
  price_ = value;
  // @@protoc_insertion_point(field_set:myexchange.Product.price)
}

// int64 amount = 6;
inline void Product::clear_amount() {
  amount_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 Product::amount() const {
  // @@protoc_insertion_point(field_get:myexchange.Product.amount)
  return amount_;
}
inline void Product::set_amount(::google::protobuf::int64 value) {
  
  amount_ = value;
  // @@protoc_insertion_point(field_set:myexchange.Product.amount)
}

// string time = 7;
inline void Product::clear_time() {
  time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Product::time() const {
  // @@protoc_insertion_point(field_get:myexchange.Product.time)
  return time_.GetNoArena();
}
inline void Product::set_time(const ::std::string& value) {
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:myexchange.Product.time)
}
#if LANG_CXX11
inline void Product::set_time(::std::string&& value) {
  
  time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:myexchange.Product.time)
}
#endif
inline void Product::set_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:myexchange.Product.time)
}
inline void Product::set_time(const char* value, size_t size) {
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:myexchange.Product.time)
}
inline ::std::string* Product::mutable_time() {
  
  // @@protoc_insertion_point(field_mutable:myexchange.Product.time)
  return time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Product::release_time() {
  // @@protoc_insertion_point(field_release:myexchange.Product.time)
  
  return time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Product::set_allocated_time(::std::string* time) {
  if (time != nullptr) {
    
  } else {
    
  }
  time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), time);
  // @@protoc_insertion_point(field_set_allocated:myexchange.Product.time)
}

// -------------------------------------------------------------------

// Order

// string id = 1;
inline void Order::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Order::id() const {
  // @@protoc_insertion_point(field_get:myexchange.Order.id)
  return id_.GetNoArena();
}
inline void Order::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:myexchange.Order.id)
}
#if LANG_CXX11
inline void Order::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:myexchange.Order.id)
}
#endif
inline void Order::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:myexchange.Order.id)
}
inline void Order::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:myexchange.Order.id)
}
inline ::std::string* Order::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:myexchange.Order.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Order::release_id() {
  // @@protoc_insertion_point(field_release:myexchange.Order.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Order::set_allocated_id(::std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:myexchange.Order.id)
}

// string productid = 2;
inline void Order::clear_productid() {
  productid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Order::productid() const {
  // @@protoc_insertion_point(field_get:myexchange.Order.productid)
  return productid_.GetNoArena();
}
inline void Order::set_productid(const ::std::string& value) {
  
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:myexchange.Order.productid)
}
#if LANG_CXX11
inline void Order::set_productid(::std::string&& value) {
  
  productid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:myexchange.Order.productid)
}
#endif
inline void Order::set_productid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:myexchange.Order.productid)
}
inline void Order::set_productid(const char* value, size_t size) {
  
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:myexchange.Order.productid)
}
inline ::std::string* Order::mutable_productid() {
  
  // @@protoc_insertion_point(field_mutable:myexchange.Order.productid)
  return productid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Order::release_productid() {
  // @@protoc_insertion_point(field_release:myexchange.Order.productid)
  
  return productid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Order::set_allocated_productid(::std::string* productid) {
  if (productid != nullptr) {
    
  } else {
    
  }
  productid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), productid);
  // @@protoc_insertion_point(field_set_allocated:myexchange.Order.productid)
}

// string productname = 3;
inline void Order::clear_productname() {
  productname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Order::productname() const {
  // @@protoc_insertion_point(field_get:myexchange.Order.productname)
  return productname_.GetNoArena();
}
inline void Order::set_productname(const ::std::string& value) {
  
  productname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:myexchange.Order.productname)
}
#if LANG_CXX11
inline void Order::set_productname(::std::string&& value) {
  
  productname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:myexchange.Order.productname)
}
#endif
inline void Order::set_productname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  productname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:myexchange.Order.productname)
}
inline void Order::set_productname(const char* value, size_t size) {
  
  productname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:myexchange.Order.productname)
}
inline ::std::string* Order::mutable_productname() {
  
  // @@protoc_insertion_point(field_mutable:myexchange.Order.productname)
  return productname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Order::release_productname() {
  // @@protoc_insertion_point(field_release:myexchange.Order.productname)
  
  return productname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Order::set_allocated_productname(::std::string* productname) {
  if (productname != nullptr) {
    
  } else {
    
  }
  productname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), productname);
  // @@protoc_insertion_point(field_set_allocated:myexchange.Order.productname)
}

// string productdesc = 4;
inline void Order::clear_productdesc() {
  productdesc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Order::productdesc() const {
  // @@protoc_insertion_point(field_get:myexchange.Order.productdesc)
  return productdesc_.GetNoArena();
}
inline void Order::set_productdesc(const ::std::string& value) {
  
  productdesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:myexchange.Order.productdesc)
}
#if LANG_CXX11
inline void Order::set_productdesc(::std::string&& value) {
  
  productdesc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:myexchange.Order.productdesc)
}
#endif
inline void Order::set_productdesc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  productdesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:myexchange.Order.productdesc)
}
inline void Order::set_productdesc(const char* value, size_t size) {
  
  productdesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:myexchange.Order.productdesc)
}
inline ::std::string* Order::mutable_productdesc() {
  
  // @@protoc_insertion_point(field_mutable:myexchange.Order.productdesc)
  return productdesc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Order::release_productdesc() {
  // @@protoc_insertion_point(field_release:myexchange.Order.productdesc)
  
  return productdesc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Order::set_allocated_productdesc(::std::string* productdesc) {
  if (productdesc != nullptr) {
    
  } else {
    
  }
  productdesc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), productdesc);
  // @@protoc_insertion_point(field_set_allocated:myexchange.Order.productdesc)
}

// double productprice = 5;
inline void Order::clear_productprice() {
  productprice_ = 0;
}
inline double Order::productprice() const {
  // @@protoc_insertion_point(field_get:myexchange.Order.productprice)
  return productprice_;
}
inline void Order::set_productprice(double value) {
  
  productprice_ = value;
  // @@protoc_insertion_point(field_set:myexchange.Order.productprice)
}

// int64 productcount = 6;
inline void Order::clear_productcount() {
  productcount_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 Order::productcount() const {
  // @@protoc_insertion_point(field_get:myexchange.Order.productcount)
  return productcount_;
}
inline void Order::set_productcount(::google::protobuf::int64 value) {
  
  productcount_ = value;
  // @@protoc_insertion_point(field_set:myexchange.Order.productcount)
}

// -------------------------------------------------------------------

// Exchange

// string orderid = 1;
inline void Exchange::clear_orderid() {
  orderid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Exchange::orderid() const {
  // @@protoc_insertion_point(field_get:myexchange.Exchange.orderid)
  return orderid_.GetNoArena();
}
inline void Exchange::set_orderid(const ::std::string& value) {
  
  orderid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:myexchange.Exchange.orderid)
}
#if LANG_CXX11
inline void Exchange::set_orderid(::std::string&& value) {
  
  orderid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:myexchange.Exchange.orderid)
}
#endif
inline void Exchange::set_orderid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  orderid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:myexchange.Exchange.orderid)
}
inline void Exchange::set_orderid(const char* value, size_t size) {
  
  orderid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:myexchange.Exchange.orderid)
}
inline ::std::string* Exchange::mutable_orderid() {
  
  // @@protoc_insertion_point(field_mutable:myexchange.Exchange.orderid)
  return orderid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Exchange::release_orderid() {
  // @@protoc_insertion_point(field_release:myexchange.Exchange.orderid)
  
  return orderid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Exchange::set_allocated_orderid(::std::string* orderid) {
  if (orderid != nullptr) {
    
  } else {
    
  }
  orderid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), orderid);
  // @@protoc_insertion_point(field_set_allocated:myexchange.Exchange.orderid)
}

// string products = 2;
inline void Exchange::clear_products() {
  products_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Exchange::products() const {
  // @@protoc_insertion_point(field_get:myexchange.Exchange.products)
  return products_.GetNoArena();
}
inline void Exchange::set_products(const ::std::string& value) {
  
  products_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:myexchange.Exchange.products)
}
#if LANG_CXX11
inline void Exchange::set_products(::std::string&& value) {
  
  products_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:myexchange.Exchange.products)
}
#endif
inline void Exchange::set_products(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  products_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:myexchange.Exchange.products)
}
inline void Exchange::set_products(const char* value, size_t size) {
  
  products_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:myexchange.Exchange.products)
}
inline ::std::string* Exchange::mutable_products() {
  
  // @@protoc_insertion_point(field_mutable:myexchange.Exchange.products)
  return products_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Exchange::release_products() {
  // @@protoc_insertion_point(field_release:myexchange.Exchange.products)
  
  return products_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Exchange::set_allocated_products(::std::string* products) {
  if (products != nullptr) {
    
  } else {
    
  }
  products_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), products);
  // @@protoc_insertion_point(field_set_allocated:myexchange.Exchange.products)
}

// double price = 3;
inline void Exchange::clear_price() {
  price_ = 0;
}
inline double Exchange::price() const {
  // @@protoc_insertion_point(field_get:myexchange.Exchange.price)
  return price_;
}
inline void Exchange::set_price(double value) {
  
  price_ = value;
  // @@protoc_insertion_point(field_set:myexchange.Exchange.price)
}

// string time = 4;
inline void Exchange::clear_time() {
  time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Exchange::time() const {
  // @@protoc_insertion_point(field_get:myexchange.Exchange.time)
  return time_.GetNoArena();
}
inline void Exchange::set_time(const ::std::string& value) {
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:myexchange.Exchange.time)
}
#if LANG_CXX11
inline void Exchange::set_time(::std::string&& value) {
  
  time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:myexchange.Exchange.time)
}
#endif
inline void Exchange::set_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:myexchange.Exchange.time)
}
inline void Exchange::set_time(const char* value, size_t size) {
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:myexchange.Exchange.time)
}
inline ::std::string* Exchange::mutable_time() {
  
  // @@protoc_insertion_point(field_mutable:myexchange.Exchange.time)
  return time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Exchange::release_time() {
  // @@protoc_insertion_point(field_release:myexchange.Exchange.time)
  
  return time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Exchange::set_allocated_time(::std::string* time) {
  if (time != nullptr) {
    
  } else {
    
  }
  time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), time);
  // @@protoc_insertion_point(field_set_allocated:myexchange.Exchange.time)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace myexchange

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_exchange_2eproto
