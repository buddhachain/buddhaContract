// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sell_order.proto

#ifndef PROTOBUF_INCLUDED_sell_5forder_2eproto
#define PROTOBUF_INCLUDED_sell_5forder_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sell_5forder_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_sell_5forder_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
class SellOrder;
class SellOrderDefaultTypeInternal;
extern SellOrderDefaultTypeInternal _SellOrder_default_instance_;
namespace google {
namespace protobuf {
template<> ::SellOrder* Arena::CreateMaybeMessage<::SellOrder>(Arena*);
}  // namespace protobuf
}  // namespace google

// ===================================================================

class SellOrder :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:SellOrder) */ {
 public:
  SellOrder();
  virtual ~SellOrder();

  SellOrder(const SellOrder& from);

  inline SellOrder& operator=(const SellOrder& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SellOrder(SellOrder&& from) noexcept
    : SellOrder() {
    *this = ::std::move(from);
  }

  inline SellOrder& operator=(SellOrder&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const SellOrder& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SellOrder* internal_default_instance() {
    return reinterpret_cast<const SellOrder*>(
               &_SellOrder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(SellOrder* other);
  friend void swap(SellOrder& a, SellOrder& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SellOrder* New() const final {
    return CreateMaybeMessage<SellOrder>(nullptr);
  }

  SellOrder* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SellOrder>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const SellOrder& from);
  void MergeFrom(const SellOrder& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SellOrder* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string buy_id = 2;
  void clear_buy_id();
  static const int kBuyIdFieldNumber = 2;
  const ::std::string& buy_id() const;
  void set_buy_id(const ::std::string& value);
  #if LANG_CXX11
  void set_buy_id(::std::string&& value);
  #endif
  void set_buy_id(const char* value);
  void set_buy_id(const char* value, size_t size);
  ::std::string* mutable_buy_id();
  ::std::string* release_buy_id();
  void set_allocated_buy_id(::std::string* buy_id);

  // string seller = 3;
  void clear_seller();
  static const int kSellerFieldNumber = 3;
  const ::std::string& seller() const;
  void set_seller(const ::std::string& value);
  #if LANG_CXX11
  void set_seller(::std::string&& value);
  #endif
  void set_seller(const char* value);
  void set_seller(const char* value, size_t size);
  ::std::string* mutable_seller();
  ::std::string* release_seller();
  void set_allocated_seller(::std::string* seller);

  // string start_timestamp = 7;
  void clear_start_timestamp();
  static const int kStartTimestampFieldNumber = 7;
  const ::std::string& start_timestamp() const;
  void set_start_timestamp(const ::std::string& value);
  #if LANG_CXX11
  void set_start_timestamp(::std::string&& value);
  #endif
  void set_start_timestamp(const char* value);
  void set_start_timestamp(const char* value, size_t size);
  ::std::string* mutable_start_timestamp();
  ::std::string* release_start_timestamp();
  void set_allocated_start_timestamp(::std::string* start_timestamp);

  // string confirm_timestamp = 8;
  void clear_confirm_timestamp();
  static const int kConfirmTimestampFieldNumber = 8;
  const ::std::string& confirm_timestamp() const;
  void set_confirm_timestamp(const ::std::string& value);
  #if LANG_CXX11
  void set_confirm_timestamp(::std::string&& value);
  #endif
  void set_confirm_timestamp(const char* value);
  void set_confirm_timestamp(const char* value, size_t size);
  ::std::string* mutable_confirm_timestamp();
  ::std::string* release_confirm_timestamp();
  void set_allocated_confirm_timestamp(::std::string* confirm_timestamp);

  // int64 amount = 4;
  void clear_amount();
  static const int kAmountFieldNumber = 4;
  ::google::protobuf::int64 amount() const;
  void set_amount(::google::protobuf::int64 value);

  // int64 price = 5;
  void clear_price();
  static const int kPriceFieldNumber = 5;
  ::google::protobuf::int64 price() const;
  void set_price(::google::protobuf::int64 value);

  // int64 state = 6;
  void clear_state();
  static const int kStateFieldNumber = 6;
  ::google::protobuf::int64 state() const;
  void set_state(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:SellOrder)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr buy_id_;
  ::google::protobuf::internal::ArenaStringPtr seller_;
  ::google::protobuf::internal::ArenaStringPtr start_timestamp_;
  ::google::protobuf::internal::ArenaStringPtr confirm_timestamp_;
  ::google::protobuf::int64 amount_;
  ::google::protobuf::int64 price_;
  ::google::protobuf::int64 state_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sell_5forder_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SellOrder

// string id = 1;
inline void SellOrder::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SellOrder::id() const {
  // @@protoc_insertion_point(field_get:SellOrder.id)
  return id_.GetNoArena();
}
inline void SellOrder::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SellOrder.id)
}
#if LANG_CXX11
inline void SellOrder::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SellOrder.id)
}
#endif
inline void SellOrder::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SellOrder.id)
}
inline void SellOrder::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SellOrder.id)
}
inline ::std::string* SellOrder::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:SellOrder.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SellOrder::release_id() {
  // @@protoc_insertion_point(field_release:SellOrder.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SellOrder::set_allocated_id(::std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:SellOrder.id)
}

// string buy_id = 2;
inline void SellOrder::clear_buy_id() {
  buy_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SellOrder::buy_id() const {
  // @@protoc_insertion_point(field_get:SellOrder.buy_id)
  return buy_id_.GetNoArena();
}
inline void SellOrder::set_buy_id(const ::std::string& value) {
  
  buy_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SellOrder.buy_id)
}
#if LANG_CXX11
inline void SellOrder::set_buy_id(::std::string&& value) {
  
  buy_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SellOrder.buy_id)
}
#endif
inline void SellOrder::set_buy_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  buy_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SellOrder.buy_id)
}
inline void SellOrder::set_buy_id(const char* value, size_t size) {
  
  buy_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SellOrder.buy_id)
}
inline ::std::string* SellOrder::mutable_buy_id() {
  
  // @@protoc_insertion_point(field_mutable:SellOrder.buy_id)
  return buy_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SellOrder::release_buy_id() {
  // @@protoc_insertion_point(field_release:SellOrder.buy_id)
  
  return buy_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SellOrder::set_allocated_buy_id(::std::string* buy_id) {
  if (buy_id != nullptr) {
    
  } else {
    
  }
  buy_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), buy_id);
  // @@protoc_insertion_point(field_set_allocated:SellOrder.buy_id)
}

// string seller = 3;
inline void SellOrder::clear_seller() {
  seller_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SellOrder::seller() const {
  // @@protoc_insertion_point(field_get:SellOrder.seller)
  return seller_.GetNoArena();
}
inline void SellOrder::set_seller(const ::std::string& value) {
  
  seller_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SellOrder.seller)
}
#if LANG_CXX11
inline void SellOrder::set_seller(::std::string&& value) {
  
  seller_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SellOrder.seller)
}
#endif
inline void SellOrder::set_seller(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  seller_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SellOrder.seller)
}
inline void SellOrder::set_seller(const char* value, size_t size) {
  
  seller_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SellOrder.seller)
}
inline ::std::string* SellOrder::mutable_seller() {
  
  // @@protoc_insertion_point(field_mutable:SellOrder.seller)
  return seller_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SellOrder::release_seller() {
  // @@protoc_insertion_point(field_release:SellOrder.seller)
  
  return seller_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SellOrder::set_allocated_seller(::std::string* seller) {
  if (seller != nullptr) {
    
  } else {
    
  }
  seller_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), seller);
  // @@protoc_insertion_point(field_set_allocated:SellOrder.seller)
}

// int64 amount = 4;
inline void SellOrder::clear_amount() {
  amount_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 SellOrder::amount() const {
  // @@protoc_insertion_point(field_get:SellOrder.amount)
  return amount_;
}
inline void SellOrder::set_amount(::google::protobuf::int64 value) {
  
  amount_ = value;
  // @@protoc_insertion_point(field_set:SellOrder.amount)
}

// int64 price = 5;
inline void SellOrder::clear_price() {
  price_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 SellOrder::price() const {
  // @@protoc_insertion_point(field_get:SellOrder.price)
  return price_;
}
inline void SellOrder::set_price(::google::protobuf::int64 value) {
  
  price_ = value;
  // @@protoc_insertion_point(field_set:SellOrder.price)
}

// int64 state = 6;
inline void SellOrder::clear_state() {
  state_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 SellOrder::state() const {
  // @@protoc_insertion_point(field_get:SellOrder.state)
  return state_;
}
inline void SellOrder::set_state(::google::protobuf::int64 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:SellOrder.state)
}

// string start_timestamp = 7;
inline void SellOrder::clear_start_timestamp() {
  start_timestamp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SellOrder::start_timestamp() const {
  // @@protoc_insertion_point(field_get:SellOrder.start_timestamp)
  return start_timestamp_.GetNoArena();
}
inline void SellOrder::set_start_timestamp(const ::std::string& value) {
  
  start_timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SellOrder.start_timestamp)
}
#if LANG_CXX11
inline void SellOrder::set_start_timestamp(::std::string&& value) {
  
  start_timestamp_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SellOrder.start_timestamp)
}
#endif
inline void SellOrder::set_start_timestamp(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  start_timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SellOrder.start_timestamp)
}
inline void SellOrder::set_start_timestamp(const char* value, size_t size) {
  
  start_timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SellOrder.start_timestamp)
}
inline ::std::string* SellOrder::mutable_start_timestamp() {
  
  // @@protoc_insertion_point(field_mutable:SellOrder.start_timestamp)
  return start_timestamp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SellOrder::release_start_timestamp() {
  // @@protoc_insertion_point(field_release:SellOrder.start_timestamp)
  
  return start_timestamp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SellOrder::set_allocated_start_timestamp(::std::string* start_timestamp) {
  if (start_timestamp != nullptr) {
    
  } else {
    
  }
  start_timestamp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start_timestamp);
  // @@protoc_insertion_point(field_set_allocated:SellOrder.start_timestamp)
}

// string confirm_timestamp = 8;
inline void SellOrder::clear_confirm_timestamp() {
  confirm_timestamp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SellOrder::confirm_timestamp() const {
  // @@protoc_insertion_point(field_get:SellOrder.confirm_timestamp)
  return confirm_timestamp_.GetNoArena();
}
inline void SellOrder::set_confirm_timestamp(const ::std::string& value) {
  
  confirm_timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SellOrder.confirm_timestamp)
}
#if LANG_CXX11
inline void SellOrder::set_confirm_timestamp(::std::string&& value) {
  
  confirm_timestamp_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SellOrder.confirm_timestamp)
}
#endif
inline void SellOrder::set_confirm_timestamp(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  confirm_timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SellOrder.confirm_timestamp)
}
inline void SellOrder::set_confirm_timestamp(const char* value, size_t size) {
  
  confirm_timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SellOrder.confirm_timestamp)
}
inline ::std::string* SellOrder::mutable_confirm_timestamp() {
  
  // @@protoc_insertion_point(field_mutable:SellOrder.confirm_timestamp)
  return confirm_timestamp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SellOrder::release_confirm_timestamp() {
  // @@protoc_insertion_point(field_release:SellOrder.confirm_timestamp)
  
  return confirm_timestamp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SellOrder::set_allocated_confirm_timestamp(::std::string* confirm_timestamp) {
  if (confirm_timestamp != nullptr) {
    
  } else {
    
  }
  confirm_timestamp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), confirm_timestamp);
  // @@protoc_insertion_point(field_set_allocated:SellOrder.confirm_timestamp)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_sell_5forder_2eproto
