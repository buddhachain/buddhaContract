// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: buddha.proto

#ifndef PROTOBUF_INCLUDED_buddha_2eproto
#define PROTOBUF_INCLUDED_buddha_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_buddha_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_buddha_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
namespace buddha {
class Exchange;
class ExchangeDefaultTypeInternal;
extern ExchangeDefaultTypeInternal _Exchange_default_instance_;
class Founder;
class FounderDefaultTypeInternal;
extern FounderDefaultTypeInternal _Founder_default_instance_;
class Kinddeed;
class KinddeedDefaultTypeInternal;
extern KinddeedDefaultTypeInternal _Kinddeed_default_instance_;
class Order;
class OrderDefaultTypeInternal;
extern OrderDefaultTypeInternal _Order_default_instance_;
}  // namespace buddha
namespace google {
namespace protobuf {
template<> ::buddha::Exchange* Arena::CreateMaybeMessage<::buddha::Exchange>(Arena*);
template<> ::buddha::Founder* Arena::CreateMaybeMessage<::buddha::Founder>(Arena*);
template<> ::buddha::Kinddeed* Arena::CreateMaybeMessage<::buddha::Kinddeed>(Arena*);
template<> ::buddha::Order* Arena::CreateMaybeMessage<::buddha::Order>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace buddha {

// ===================================================================

class Founder :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:buddha.Founder) */ {
 public:
  Founder();
  virtual ~Founder();

  Founder(const Founder& from);

  inline Founder& operator=(const Founder& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Founder(Founder&& from) noexcept
    : Founder() {
    *this = ::std::move(from);
  }

  inline Founder& operator=(Founder&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const Founder& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Founder* internal_default_instance() {
    return reinterpret_cast<const Founder*>(
               &_Founder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Founder* other);
  friend void swap(Founder& a, Founder& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Founder* New() const final {
    return CreateMaybeMessage<Founder>(nullptr);
  }

  Founder* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Founder>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const Founder& from);
  void MergeFrom(const Founder& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Founder* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string desc = 2;
  void clear_desc();
  static const int kDescFieldNumber = 2;
  const ::std::string& desc() const;
  void set_desc(const ::std::string& value);
  #if LANG_CXX11
  void set_desc(::std::string&& value);
  #endif
  void set_desc(const char* value);
  void set_desc(const char* value, size_t size);
  ::std::string* mutable_desc();
  ::std::string* release_desc();
  void set_allocated_desc(::std::string* desc);

  // int64 amount = 3;
  void clear_amount();
  static const int kAmountFieldNumber = 3;
  ::google::protobuf::int64 amount() const;
  void set_amount(::google::protobuf::int64 value);

  // bool flag = 4;
  void clear_flag();
  static const int kFlagFieldNumber = 4;
  bool flag() const;
  void set_flag(bool value);

  // @@protoc_insertion_point(class_scope:buddha.Founder)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr desc_;
  ::google::protobuf::int64 amount_;
  bool flag_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_buddha_2eproto;
};
// -------------------------------------------------------------------

class Kinddeed :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:buddha.Kinddeed) */ {
 public:
  Kinddeed();
  virtual ~Kinddeed();

  Kinddeed(const Kinddeed& from);

  inline Kinddeed& operator=(const Kinddeed& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Kinddeed(Kinddeed&& from) noexcept
    : Kinddeed() {
    *this = ::std::move(from);
  }

  inline Kinddeed& operator=(Kinddeed&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const Kinddeed& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Kinddeed* internal_default_instance() {
    return reinterpret_cast<const Kinddeed*>(
               &_Kinddeed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Kinddeed* other);
  friend void swap(Kinddeed& a, Kinddeed& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Kinddeed* New() const final {
    return CreateMaybeMessage<Kinddeed>(nullptr);
  }

  Kinddeed* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Kinddeed>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const Kinddeed& from);
  void MergeFrom(const Kinddeed& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Kinddeed* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string desc = 3;
  void clear_desc();
  static const int kDescFieldNumber = 3;
  const ::std::string& desc() const;
  void set_desc(const ::std::string& value);
  #if LANG_CXX11
  void set_desc(::std::string&& value);
  #endif
  void set_desc(const char* value);
  void set_desc(const char* value, size_t size);
  ::std::string* mutable_desc();
  ::std::string* release_desc();
  void set_allocated_desc(::std::string* desc);

  // string lasttime = 7;
  void clear_lasttime();
  static const int kLasttimeFieldNumber = 7;
  const ::std::string& lasttime() const;
  void set_lasttime(const ::std::string& value);
  #if LANG_CXX11
  void set_lasttime(::std::string&& value);
  #endif
  void set_lasttime(const char* value);
  void set_lasttime(const char* value, size_t size);
  ::std::string* mutable_lasttime();
  ::std::string* release_lasttime();
  void set_allocated_lasttime(::std::string* lasttime);

  // double price = 5;
  void clear_price();
  static const int kPriceFieldNumber = 5;
  double price() const;
  void set_price(double value);

  // int64 count = 6;
  void clear_count();
  static const int kCountFieldNumber = 6;
  ::google::protobuf::int64 count() const;
  void set_count(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:buddha.Kinddeed)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr desc_;
  ::google::protobuf::internal::ArenaStringPtr lasttime_;
  double price_;
  ::google::protobuf::int64 count_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_buddha_2eproto;
};
// -------------------------------------------------------------------

class Order :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:buddha.Order) */ {
 public:
  Order();
  virtual ~Order();

  Order(const Order& from);

  inline Order& operator=(const Order& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Order(Order&& from) noexcept
    : Order() {
    *this = ::std::move(from);
  }

  inline Order& operator=(Order&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const Order& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Order* internal_default_instance() {
    return reinterpret_cast<const Order*>(
               &_Order_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Order* other);
  friend void swap(Order& a, Order& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Order* New() const final {
    return CreateMaybeMessage<Order>(nullptr);
  }

  Order* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Order>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const Order& from);
  void MergeFrom(const Order& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Order* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string product_id = 2;
  void clear_product_id();
  static const int kProductIdFieldNumber = 2;
  const ::std::string& product_id() const;
  void set_product_id(const ::std::string& value);
  #if LANG_CXX11
  void set_product_id(::std::string&& value);
  #endif
  void set_product_id(const char* value);
  void set_product_id(const char* value, size_t size);
  ::std::string* mutable_product_id();
  ::std::string* release_product_id();
  void set_allocated_product_id(::std::string* product_id);

  // string product_name = 3;
  void clear_product_name();
  static const int kProductNameFieldNumber = 3;
  const ::std::string& product_name() const;
  void set_product_name(const ::std::string& value);
  #if LANG_CXX11
  void set_product_name(::std::string&& value);
  #endif
  void set_product_name(const char* value);
  void set_product_name(const char* value, size_t size);
  ::std::string* mutable_product_name();
  ::std::string* release_product_name();
  void set_allocated_product_name(::std::string* product_name);

  // string product_desc = 4;
  void clear_product_desc();
  static const int kProductDescFieldNumber = 4;
  const ::std::string& product_desc() const;
  void set_product_desc(const ::std::string& value);
  #if LANG_CXX11
  void set_product_desc(::std::string&& value);
  #endif
  void set_product_desc(const char* value);
  void set_product_desc(const char* value, size_t size);
  ::std::string* mutable_product_desc();
  ::std::string* release_product_desc();
  void set_allocated_product_desc(::std::string* product_desc);

  // double product_price = 5;
  void clear_product_price();
  static const int kProductPriceFieldNumber = 5;
  double product_price() const;
  void set_product_price(double value);

  // int64 product_count = 6;
  void clear_product_count();
  static const int kProductCountFieldNumber = 6;
  ::google::protobuf::int64 product_count() const;
  void set_product_count(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:buddha.Order)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr product_id_;
  ::google::protobuf::internal::ArenaStringPtr product_name_;
  ::google::protobuf::internal::ArenaStringPtr product_desc_;
  double product_price_;
  ::google::protobuf::int64 product_count_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_buddha_2eproto;
};
// -------------------------------------------------------------------

class Exchange :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:buddha.Exchange) */ {
 public:
  Exchange();
  virtual ~Exchange();

  Exchange(const Exchange& from);

  inline Exchange& operator=(const Exchange& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Exchange(Exchange&& from) noexcept
    : Exchange() {
    *this = ::std::move(from);
  }

  inline Exchange& operator=(Exchange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const Exchange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Exchange* internal_default_instance() {
    return reinterpret_cast<const Exchange*>(
               &_Exchange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Exchange* other);
  friend void swap(Exchange& a, Exchange& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Exchange* New() const final {
    return CreateMaybeMessage<Exchange>(nullptr);
  }

  Exchange* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Exchange>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const Exchange& from);
  void MergeFrom(const Exchange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Exchange* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string order_id = 1;
  void clear_order_id();
  static const int kOrderIdFieldNumber = 1;
  const ::std::string& order_id() const;
  void set_order_id(const ::std::string& value);
  #if LANG_CXX11
  void set_order_id(::std::string&& value);
  #endif
  void set_order_id(const char* value);
  void set_order_id(const char* value, size_t size);
  ::std::string* mutable_order_id();
  ::std::string* release_order_id();
  void set_allocated_order_id(::std::string* order_id);

  // string products = 2;
  void clear_products();
  static const int kProductsFieldNumber = 2;
  const ::std::string& products() const;
  void set_products(const ::std::string& value);
  #if LANG_CXX11
  void set_products(::std::string&& value);
  #endif
  void set_products(const char* value);
  void set_products(const char* value, size_t size);
  ::std::string* mutable_products();
  ::std::string* release_products();
  void set_allocated_products(::std::string* products);

  // string timestamp = 4;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 4;
  const ::std::string& timestamp() const;
  void set_timestamp(const ::std::string& value);
  #if LANG_CXX11
  void set_timestamp(::std::string&& value);
  #endif
  void set_timestamp(const char* value);
  void set_timestamp(const char* value, size_t size);
  ::std::string* mutable_timestamp();
  ::std::string* release_timestamp();
  void set_allocated_timestamp(::std::string* timestamp);

  // double amount = 3;
  void clear_amount();
  static const int kAmountFieldNumber = 3;
  double amount() const;
  void set_amount(double value);

  // @@protoc_insertion_point(class_scope:buddha.Exchange)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr order_id_;
  ::google::protobuf::internal::ArenaStringPtr products_;
  ::google::protobuf::internal::ArenaStringPtr timestamp_;
  double amount_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_buddha_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Founder

// string name = 1;
inline void Founder::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Founder::name() const {
  // @@protoc_insertion_point(field_get:buddha.Founder.name)
  return name_.GetNoArena();
}
inline void Founder::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:buddha.Founder.name)
}
#if LANG_CXX11
inline void Founder::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:buddha.Founder.name)
}
#endif
inline void Founder::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:buddha.Founder.name)
}
inline void Founder::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:buddha.Founder.name)
}
inline ::std::string* Founder::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:buddha.Founder.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Founder::release_name() {
  // @@protoc_insertion_point(field_release:buddha.Founder.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Founder::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:buddha.Founder.name)
}

// string desc = 2;
inline void Founder::clear_desc() {
  desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Founder::desc() const {
  // @@protoc_insertion_point(field_get:buddha.Founder.desc)
  return desc_.GetNoArena();
}
inline void Founder::set_desc(const ::std::string& value) {
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:buddha.Founder.desc)
}
#if LANG_CXX11
inline void Founder::set_desc(::std::string&& value) {
  
  desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:buddha.Founder.desc)
}
#endif
inline void Founder::set_desc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:buddha.Founder.desc)
}
inline void Founder::set_desc(const char* value, size_t size) {
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:buddha.Founder.desc)
}
inline ::std::string* Founder::mutable_desc() {
  
  // @@protoc_insertion_point(field_mutable:buddha.Founder.desc)
  return desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Founder::release_desc() {
  // @@protoc_insertion_point(field_release:buddha.Founder.desc)
  
  return desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Founder::set_allocated_desc(::std::string* desc) {
  if (desc != nullptr) {
    
  } else {
    
  }
  desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:buddha.Founder.desc)
}

// int64 amount = 3;
inline void Founder::clear_amount() {
  amount_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 Founder::amount() const {
  // @@protoc_insertion_point(field_get:buddha.Founder.amount)
  return amount_;
}
inline void Founder::set_amount(::google::protobuf::int64 value) {
  
  amount_ = value;
  // @@protoc_insertion_point(field_set:buddha.Founder.amount)
}

// bool flag = 4;
inline void Founder::clear_flag() {
  flag_ = false;
}
inline bool Founder::flag() const {
  // @@protoc_insertion_point(field_get:buddha.Founder.flag)
  return flag_;
}
inline void Founder::set_flag(bool value) {
  
  flag_ = value;
  // @@protoc_insertion_point(field_set:buddha.Founder.flag)
}

// -------------------------------------------------------------------

// Kinddeed

// string id = 1;
inline void Kinddeed::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Kinddeed::id() const {
  // @@protoc_insertion_point(field_get:buddha.Kinddeed.id)
  return id_.GetNoArena();
}
inline void Kinddeed::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:buddha.Kinddeed.id)
}
#if LANG_CXX11
inline void Kinddeed::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:buddha.Kinddeed.id)
}
#endif
inline void Kinddeed::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:buddha.Kinddeed.id)
}
inline void Kinddeed::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:buddha.Kinddeed.id)
}
inline ::std::string* Kinddeed::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:buddha.Kinddeed.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Kinddeed::release_id() {
  // @@protoc_insertion_point(field_release:buddha.Kinddeed.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Kinddeed::set_allocated_id(::std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:buddha.Kinddeed.id)
}

// string name = 2;
inline void Kinddeed::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Kinddeed::name() const {
  // @@protoc_insertion_point(field_get:buddha.Kinddeed.name)
  return name_.GetNoArena();
}
inline void Kinddeed::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:buddha.Kinddeed.name)
}
#if LANG_CXX11
inline void Kinddeed::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:buddha.Kinddeed.name)
}
#endif
inline void Kinddeed::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:buddha.Kinddeed.name)
}
inline void Kinddeed::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:buddha.Kinddeed.name)
}
inline ::std::string* Kinddeed::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:buddha.Kinddeed.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Kinddeed::release_name() {
  // @@protoc_insertion_point(field_release:buddha.Kinddeed.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Kinddeed::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:buddha.Kinddeed.name)
}

// string desc = 3;
inline void Kinddeed::clear_desc() {
  desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Kinddeed::desc() const {
  // @@protoc_insertion_point(field_get:buddha.Kinddeed.desc)
  return desc_.GetNoArena();
}
inline void Kinddeed::set_desc(const ::std::string& value) {
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:buddha.Kinddeed.desc)
}
#if LANG_CXX11
inline void Kinddeed::set_desc(::std::string&& value) {
  
  desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:buddha.Kinddeed.desc)
}
#endif
inline void Kinddeed::set_desc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:buddha.Kinddeed.desc)
}
inline void Kinddeed::set_desc(const char* value, size_t size) {
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:buddha.Kinddeed.desc)
}
inline ::std::string* Kinddeed::mutable_desc() {
  
  // @@protoc_insertion_point(field_mutable:buddha.Kinddeed.desc)
  return desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Kinddeed::release_desc() {
  // @@protoc_insertion_point(field_release:buddha.Kinddeed.desc)
  
  return desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Kinddeed::set_allocated_desc(::std::string* desc) {
  if (desc != nullptr) {
    
  } else {
    
  }
  desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:buddha.Kinddeed.desc)
}

// double price = 5;
inline void Kinddeed::clear_price() {
  price_ = 0;
}
inline double Kinddeed::price() const {
  // @@protoc_insertion_point(field_get:buddha.Kinddeed.price)
  return price_;
}
inline void Kinddeed::set_price(double value) {
  
  price_ = value;
  // @@protoc_insertion_point(field_set:buddha.Kinddeed.price)
}

// int64 count = 6;
inline void Kinddeed::clear_count() {
  count_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 Kinddeed::count() const {
  // @@protoc_insertion_point(field_get:buddha.Kinddeed.count)
  return count_;
}
inline void Kinddeed::set_count(::google::protobuf::int64 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:buddha.Kinddeed.count)
}

// string lasttime = 7;
inline void Kinddeed::clear_lasttime() {
  lasttime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Kinddeed::lasttime() const {
  // @@protoc_insertion_point(field_get:buddha.Kinddeed.lasttime)
  return lasttime_.GetNoArena();
}
inline void Kinddeed::set_lasttime(const ::std::string& value) {
  
  lasttime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:buddha.Kinddeed.lasttime)
}
#if LANG_CXX11
inline void Kinddeed::set_lasttime(::std::string&& value) {
  
  lasttime_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:buddha.Kinddeed.lasttime)
}
#endif
inline void Kinddeed::set_lasttime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  lasttime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:buddha.Kinddeed.lasttime)
}
inline void Kinddeed::set_lasttime(const char* value, size_t size) {
  
  lasttime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:buddha.Kinddeed.lasttime)
}
inline ::std::string* Kinddeed::mutable_lasttime() {
  
  // @@protoc_insertion_point(field_mutable:buddha.Kinddeed.lasttime)
  return lasttime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Kinddeed::release_lasttime() {
  // @@protoc_insertion_point(field_release:buddha.Kinddeed.lasttime)
  
  return lasttime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Kinddeed::set_allocated_lasttime(::std::string* lasttime) {
  if (lasttime != nullptr) {
    
  } else {
    
  }
  lasttime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lasttime);
  // @@protoc_insertion_point(field_set_allocated:buddha.Kinddeed.lasttime)
}

// -------------------------------------------------------------------

// Order

// string id = 1;
inline void Order::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Order::id() const {
  // @@protoc_insertion_point(field_get:buddha.Order.id)
  return id_.GetNoArena();
}
inline void Order::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:buddha.Order.id)
}
#if LANG_CXX11
inline void Order::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:buddha.Order.id)
}
#endif
inline void Order::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:buddha.Order.id)
}
inline void Order::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:buddha.Order.id)
}
inline ::std::string* Order::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:buddha.Order.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Order::release_id() {
  // @@protoc_insertion_point(field_release:buddha.Order.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Order::set_allocated_id(::std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:buddha.Order.id)
}

// string product_id = 2;
inline void Order::clear_product_id() {
  product_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Order::product_id() const {
  // @@protoc_insertion_point(field_get:buddha.Order.product_id)
  return product_id_.GetNoArena();
}
inline void Order::set_product_id(const ::std::string& value) {
  
  product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:buddha.Order.product_id)
}
#if LANG_CXX11
inline void Order::set_product_id(::std::string&& value) {
  
  product_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:buddha.Order.product_id)
}
#endif
inline void Order::set_product_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:buddha.Order.product_id)
}
inline void Order::set_product_id(const char* value, size_t size) {
  
  product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:buddha.Order.product_id)
}
inline ::std::string* Order::mutable_product_id() {
  
  // @@protoc_insertion_point(field_mutable:buddha.Order.product_id)
  return product_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Order::release_product_id() {
  // @@protoc_insertion_point(field_release:buddha.Order.product_id)
  
  return product_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Order::set_allocated_product_id(::std::string* product_id) {
  if (product_id != nullptr) {
    
  } else {
    
  }
  product_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), product_id);
  // @@protoc_insertion_point(field_set_allocated:buddha.Order.product_id)
}

// string product_name = 3;
inline void Order::clear_product_name() {
  product_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Order::product_name() const {
  // @@protoc_insertion_point(field_get:buddha.Order.product_name)
  return product_name_.GetNoArena();
}
inline void Order::set_product_name(const ::std::string& value) {
  
  product_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:buddha.Order.product_name)
}
#if LANG_CXX11
inline void Order::set_product_name(::std::string&& value) {
  
  product_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:buddha.Order.product_name)
}
#endif
inline void Order::set_product_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  product_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:buddha.Order.product_name)
}
inline void Order::set_product_name(const char* value, size_t size) {
  
  product_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:buddha.Order.product_name)
}
inline ::std::string* Order::mutable_product_name() {
  
  // @@protoc_insertion_point(field_mutable:buddha.Order.product_name)
  return product_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Order::release_product_name() {
  // @@protoc_insertion_point(field_release:buddha.Order.product_name)
  
  return product_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Order::set_allocated_product_name(::std::string* product_name) {
  if (product_name != nullptr) {
    
  } else {
    
  }
  product_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), product_name);
  // @@protoc_insertion_point(field_set_allocated:buddha.Order.product_name)
}

// string product_desc = 4;
inline void Order::clear_product_desc() {
  product_desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Order::product_desc() const {
  // @@protoc_insertion_point(field_get:buddha.Order.product_desc)
  return product_desc_.GetNoArena();
}
inline void Order::set_product_desc(const ::std::string& value) {
  
  product_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:buddha.Order.product_desc)
}
#if LANG_CXX11
inline void Order::set_product_desc(::std::string&& value) {
  
  product_desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:buddha.Order.product_desc)
}
#endif
inline void Order::set_product_desc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  product_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:buddha.Order.product_desc)
}
inline void Order::set_product_desc(const char* value, size_t size) {
  
  product_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:buddha.Order.product_desc)
}
inline ::std::string* Order::mutable_product_desc() {
  
  // @@protoc_insertion_point(field_mutable:buddha.Order.product_desc)
  return product_desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Order::release_product_desc() {
  // @@protoc_insertion_point(field_release:buddha.Order.product_desc)
  
  return product_desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Order::set_allocated_product_desc(::std::string* product_desc) {
  if (product_desc != nullptr) {
    
  } else {
    
  }
  product_desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), product_desc);
  // @@protoc_insertion_point(field_set_allocated:buddha.Order.product_desc)
}

// double product_price = 5;
inline void Order::clear_product_price() {
  product_price_ = 0;
}
inline double Order::product_price() const {
  // @@protoc_insertion_point(field_get:buddha.Order.product_price)
  return product_price_;
}
inline void Order::set_product_price(double value) {
  
  product_price_ = value;
  // @@protoc_insertion_point(field_set:buddha.Order.product_price)
}

// int64 product_count = 6;
inline void Order::clear_product_count() {
  product_count_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 Order::product_count() const {
  // @@protoc_insertion_point(field_get:buddha.Order.product_count)
  return product_count_;
}
inline void Order::set_product_count(::google::protobuf::int64 value) {
  
  product_count_ = value;
  // @@protoc_insertion_point(field_set:buddha.Order.product_count)
}

// -------------------------------------------------------------------

// Exchange

// string order_id = 1;
inline void Exchange::clear_order_id() {
  order_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Exchange::order_id() const {
  // @@protoc_insertion_point(field_get:buddha.Exchange.order_id)
  return order_id_.GetNoArena();
}
inline void Exchange::set_order_id(const ::std::string& value) {
  
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:buddha.Exchange.order_id)
}
#if LANG_CXX11
inline void Exchange::set_order_id(::std::string&& value) {
  
  order_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:buddha.Exchange.order_id)
}
#endif
inline void Exchange::set_order_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:buddha.Exchange.order_id)
}
inline void Exchange::set_order_id(const char* value, size_t size) {
  
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:buddha.Exchange.order_id)
}
inline ::std::string* Exchange::mutable_order_id() {
  
  // @@protoc_insertion_point(field_mutable:buddha.Exchange.order_id)
  return order_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Exchange::release_order_id() {
  // @@protoc_insertion_point(field_release:buddha.Exchange.order_id)
  
  return order_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Exchange::set_allocated_order_id(::std::string* order_id) {
  if (order_id != nullptr) {
    
  } else {
    
  }
  order_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_id);
  // @@protoc_insertion_point(field_set_allocated:buddha.Exchange.order_id)
}

// string products = 2;
inline void Exchange::clear_products() {
  products_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Exchange::products() const {
  // @@protoc_insertion_point(field_get:buddha.Exchange.products)
  return products_.GetNoArena();
}
inline void Exchange::set_products(const ::std::string& value) {
  
  products_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:buddha.Exchange.products)
}
#if LANG_CXX11
inline void Exchange::set_products(::std::string&& value) {
  
  products_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:buddha.Exchange.products)
}
#endif
inline void Exchange::set_products(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  products_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:buddha.Exchange.products)
}
inline void Exchange::set_products(const char* value, size_t size) {
  
  products_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:buddha.Exchange.products)
}
inline ::std::string* Exchange::mutable_products() {
  
  // @@protoc_insertion_point(field_mutable:buddha.Exchange.products)
  return products_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Exchange::release_products() {
  // @@protoc_insertion_point(field_release:buddha.Exchange.products)
  
  return products_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Exchange::set_allocated_products(::std::string* products) {
  if (products != nullptr) {
    
  } else {
    
  }
  products_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), products);
  // @@protoc_insertion_point(field_set_allocated:buddha.Exchange.products)
}

// double amount = 3;
inline void Exchange::clear_amount() {
  amount_ = 0;
}
inline double Exchange::amount() const {
  // @@protoc_insertion_point(field_get:buddha.Exchange.amount)
  return amount_;
}
inline void Exchange::set_amount(double value) {
  
  amount_ = value;
  // @@protoc_insertion_point(field_set:buddha.Exchange.amount)
}

// string timestamp = 4;
inline void Exchange::clear_timestamp() {
  timestamp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Exchange::timestamp() const {
  // @@protoc_insertion_point(field_get:buddha.Exchange.timestamp)
  return timestamp_.GetNoArena();
}
inline void Exchange::set_timestamp(const ::std::string& value) {
  
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:buddha.Exchange.timestamp)
}
#if LANG_CXX11
inline void Exchange::set_timestamp(::std::string&& value) {
  
  timestamp_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:buddha.Exchange.timestamp)
}
#endif
inline void Exchange::set_timestamp(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:buddha.Exchange.timestamp)
}
inline void Exchange::set_timestamp(const char* value, size_t size) {
  
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:buddha.Exchange.timestamp)
}
inline ::std::string* Exchange::mutable_timestamp() {
  
  // @@protoc_insertion_point(field_mutable:buddha.Exchange.timestamp)
  return timestamp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Exchange::release_timestamp() {
  // @@protoc_insertion_point(field_release:buddha.Exchange.timestamp)
  
  return timestamp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Exchange::set_allocated_timestamp(::std::string* timestamp) {
  if (timestamp != nullptr) {
    
  } else {
    
  }
  timestamp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timestamp);
  // @@protoc_insertion_point(field_set_allocated:buddha.Exchange.timestamp)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace buddha

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_buddha_2eproto
