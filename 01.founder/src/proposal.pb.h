// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proposal.proto

#ifndef PROTOBUF_INCLUDED_proposal_2eproto
#define PROTOBUF_INCLUDED_proposal_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proposal_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_proposal_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
class Proposal;
class ProposalDefaultTypeInternal;
extern ProposalDefaultTypeInternal _Proposal_default_instance_;
namespace google {
namespace protobuf {
template<> ::Proposal* Arena::CreateMaybeMessage<::Proposal>(Arena*);
}  // namespace protobuf
}  // namespace google

// ===================================================================

class Proposal :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:Proposal) */ {
 public:
  Proposal();
  virtual ~Proposal();

  Proposal(const Proposal& from);

  inline Proposal& operator=(const Proposal& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Proposal(Proposal&& from) noexcept
    : Proposal() {
    *this = ::std::move(from);
  }

  inline Proposal& operator=(Proposal&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const Proposal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Proposal* internal_default_instance() {
    return reinterpret_cast<const Proposal*>(
               &_Proposal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Proposal* other);
  friend void swap(Proposal& a, Proposal& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Proposal* New() const final {
    return CreateMaybeMessage<Proposal>(nullptr);
  }

  Proposal* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Proposal>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const Proposal& from);
  void MergeFrom(const Proposal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Proposal* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // string value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // string owner = 3;
  void clear_owner();
  static const int kOwnerFieldNumber = 3;
  const ::std::string& owner() const;
  void set_owner(const ::std::string& value);
  #if LANG_CXX11
  void set_owner(::std::string&& value);
  #endif
  void set_owner(const char* value);
  void set_owner(const char* value, size_t size);
  ::std::string* mutable_owner();
  ::std::string* release_owner();
  void set_allocated_owner(::std::string* owner);

  // string newvalue = 4;
  void clear_newvalue();
  static const int kNewvalueFieldNumber = 4;
  const ::std::string& newvalue() const;
  void set_newvalue(const ::std::string& value);
  #if LANG_CXX11
  void set_newvalue(::std::string&& value);
  #endif
  void set_newvalue(const char* value);
  void set_newvalue(const char* value, size_t size);
  ::std::string* mutable_newvalue();
  ::std::string* release_newvalue();
  void set_allocated_newvalue(::std::string* newvalue);

  // string operate = 5;
  void clear_operate();
  static const int kOperateFieldNumber = 5;
  const ::std::string& operate() const;
  void set_operate(const ::std::string& value);
  #if LANG_CXX11
  void set_operate(::std::string&& value);
  #endif
  void set_operate(const char* value);
  void set_operate(const char* value, size_t size);
  ::std::string* mutable_operate();
  ::std::string* release_operate();
  void set_allocated_operate(::std::string* operate);

  // string timestamp = 6;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 6;
  const ::std::string& timestamp() const;
  void set_timestamp(const ::std::string& value);
  #if LANG_CXX11
  void set_timestamp(::std::string&& value);
  #endif
  void set_timestamp(const char* value);
  void set_timestamp(const char* value, size_t size);
  ::std::string* mutable_timestamp();
  ::std::string* release_timestamp();
  void set_allocated_timestamp(::std::string* timestamp);

  // string expire = 7;
  void clear_expire();
  static const int kExpireFieldNumber = 7;
  const ::std::string& expire() const;
  void set_expire(const ::std::string& value);
  #if LANG_CXX11
  void set_expire(::std::string&& value);
  #endif
  void set_expire(const char* value);
  void set_expire(const char* value, size_t size);
  ::std::string* mutable_expire();
  ::std::string* release_expire();
  void set_allocated_expire(::std::string* expire);

  // string founders = 9;
  void clear_founders();
  static const int kFoundersFieldNumber = 9;
  const ::std::string& founders() const;
  void set_founders(const ::std::string& value);
  #if LANG_CXX11
  void set_founders(::std::string&& value);
  #endif
  void set_founders(const char* value);
  void set_founders(const char* value, size_t size);
  ::std::string* mutable_founders();
  ::std::string* release_founders();
  void set_allocated_founders(::std::string* founders);

  // string results = 10;
  void clear_results();
  static const int kResultsFieldNumber = 10;
  const ::std::string& results() const;
  void set_results(const ::std::string& value);
  #if LANG_CXX11
  void set_results(::std::string&& value);
  #endif
  void set_results(const char* value);
  void set_results(const char* value, size_t size);
  ::std::string* mutable_results();
  ::std::string* release_results();
  void set_allocated_results(::std::string* results);

  // string timestamps = 11;
  void clear_timestamps();
  static const int kTimestampsFieldNumber = 11;
  const ::std::string& timestamps() const;
  void set_timestamps(const ::std::string& value);
  #if LANG_CXX11
  void set_timestamps(::std::string&& value);
  #endif
  void set_timestamps(const char* value);
  void set_timestamps(const char* value, size_t size);
  ::std::string* mutable_timestamps();
  ::std::string* release_timestamps();
  void set_allocated_timestamps(::std::string* timestamps);

  // int64 count = 8;
  void clear_count();
  static const int kCountFieldNumber = 8;
  ::google::protobuf::int64 count() const;
  void set_count(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:Proposal)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::google::protobuf::internal::ArenaStringPtr owner_;
  ::google::protobuf::internal::ArenaStringPtr newvalue_;
  ::google::protobuf::internal::ArenaStringPtr operate_;
  ::google::protobuf::internal::ArenaStringPtr timestamp_;
  ::google::protobuf::internal::ArenaStringPtr expire_;
  ::google::protobuf::internal::ArenaStringPtr founders_;
  ::google::protobuf::internal::ArenaStringPtr results_;
  ::google::protobuf::internal::ArenaStringPtr timestamps_;
  ::google::protobuf::int64 count_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proposal_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Proposal

// string key = 1;
inline void Proposal::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Proposal::key() const {
  // @@protoc_insertion_point(field_get:Proposal.key)
  return key_.GetNoArena();
}
inline void Proposal::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proposal.key)
}
#if LANG_CXX11
inline void Proposal::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proposal.key)
}
#endif
inline void Proposal::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proposal.key)
}
inline void Proposal::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proposal.key)
}
inline ::std::string* Proposal::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:Proposal.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Proposal::release_key() {
  // @@protoc_insertion_point(field_release:Proposal.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Proposal::set_allocated_key(::std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:Proposal.key)
}

// string value = 2;
inline void Proposal::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Proposal::value() const {
  // @@protoc_insertion_point(field_get:Proposal.value)
  return value_.GetNoArena();
}
inline void Proposal::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proposal.value)
}
#if LANG_CXX11
inline void Proposal::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proposal.value)
}
#endif
inline void Proposal::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proposal.value)
}
inline void Proposal::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proposal.value)
}
inline ::std::string* Proposal::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:Proposal.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Proposal::release_value() {
  // @@protoc_insertion_point(field_release:Proposal.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Proposal::set_allocated_value(::std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:Proposal.value)
}

// string owner = 3;
inline void Proposal::clear_owner() {
  owner_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Proposal::owner() const {
  // @@protoc_insertion_point(field_get:Proposal.owner)
  return owner_.GetNoArena();
}
inline void Proposal::set_owner(const ::std::string& value) {
  
  owner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proposal.owner)
}
#if LANG_CXX11
inline void Proposal::set_owner(::std::string&& value) {
  
  owner_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proposal.owner)
}
#endif
inline void Proposal::set_owner(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  owner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proposal.owner)
}
inline void Proposal::set_owner(const char* value, size_t size) {
  
  owner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proposal.owner)
}
inline ::std::string* Proposal::mutable_owner() {
  
  // @@protoc_insertion_point(field_mutable:Proposal.owner)
  return owner_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Proposal::release_owner() {
  // @@protoc_insertion_point(field_release:Proposal.owner)
  
  return owner_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Proposal::set_allocated_owner(::std::string* owner) {
  if (owner != nullptr) {
    
  } else {
    
  }
  owner_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), owner);
  // @@protoc_insertion_point(field_set_allocated:Proposal.owner)
}

// string newvalue = 4;
inline void Proposal::clear_newvalue() {
  newvalue_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Proposal::newvalue() const {
  // @@protoc_insertion_point(field_get:Proposal.newvalue)
  return newvalue_.GetNoArena();
}
inline void Proposal::set_newvalue(const ::std::string& value) {
  
  newvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proposal.newvalue)
}
#if LANG_CXX11
inline void Proposal::set_newvalue(::std::string&& value) {
  
  newvalue_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proposal.newvalue)
}
#endif
inline void Proposal::set_newvalue(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  newvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proposal.newvalue)
}
inline void Proposal::set_newvalue(const char* value, size_t size) {
  
  newvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proposal.newvalue)
}
inline ::std::string* Proposal::mutable_newvalue() {
  
  // @@protoc_insertion_point(field_mutable:Proposal.newvalue)
  return newvalue_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Proposal::release_newvalue() {
  // @@protoc_insertion_point(field_release:Proposal.newvalue)
  
  return newvalue_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Proposal::set_allocated_newvalue(::std::string* newvalue) {
  if (newvalue != nullptr) {
    
  } else {
    
  }
  newvalue_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), newvalue);
  // @@protoc_insertion_point(field_set_allocated:Proposal.newvalue)
}

// string operate = 5;
inline void Proposal::clear_operate() {
  operate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Proposal::operate() const {
  // @@protoc_insertion_point(field_get:Proposal.operate)
  return operate_.GetNoArena();
}
inline void Proposal::set_operate(const ::std::string& value) {
  
  operate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proposal.operate)
}
#if LANG_CXX11
inline void Proposal::set_operate(::std::string&& value) {
  
  operate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proposal.operate)
}
#endif
inline void Proposal::set_operate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  operate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proposal.operate)
}
inline void Proposal::set_operate(const char* value, size_t size) {
  
  operate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proposal.operate)
}
inline ::std::string* Proposal::mutable_operate() {
  
  // @@protoc_insertion_point(field_mutable:Proposal.operate)
  return operate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Proposal::release_operate() {
  // @@protoc_insertion_point(field_release:Proposal.operate)
  
  return operate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Proposal::set_allocated_operate(::std::string* operate) {
  if (operate != nullptr) {
    
  } else {
    
  }
  operate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), operate);
  // @@protoc_insertion_point(field_set_allocated:Proposal.operate)
}

// string timestamp = 6;
inline void Proposal::clear_timestamp() {
  timestamp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Proposal::timestamp() const {
  // @@protoc_insertion_point(field_get:Proposal.timestamp)
  return timestamp_.GetNoArena();
}
inline void Proposal::set_timestamp(const ::std::string& value) {
  
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proposal.timestamp)
}
#if LANG_CXX11
inline void Proposal::set_timestamp(::std::string&& value) {
  
  timestamp_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proposal.timestamp)
}
#endif
inline void Proposal::set_timestamp(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proposal.timestamp)
}
inline void Proposal::set_timestamp(const char* value, size_t size) {
  
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proposal.timestamp)
}
inline ::std::string* Proposal::mutable_timestamp() {
  
  // @@protoc_insertion_point(field_mutable:Proposal.timestamp)
  return timestamp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Proposal::release_timestamp() {
  // @@protoc_insertion_point(field_release:Proposal.timestamp)
  
  return timestamp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Proposal::set_allocated_timestamp(::std::string* timestamp) {
  if (timestamp != nullptr) {
    
  } else {
    
  }
  timestamp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timestamp);
  // @@protoc_insertion_point(field_set_allocated:Proposal.timestamp)
}

// string expire = 7;
inline void Proposal::clear_expire() {
  expire_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Proposal::expire() const {
  // @@protoc_insertion_point(field_get:Proposal.expire)
  return expire_.GetNoArena();
}
inline void Proposal::set_expire(const ::std::string& value) {
  
  expire_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proposal.expire)
}
#if LANG_CXX11
inline void Proposal::set_expire(::std::string&& value) {
  
  expire_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proposal.expire)
}
#endif
inline void Proposal::set_expire(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  expire_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proposal.expire)
}
inline void Proposal::set_expire(const char* value, size_t size) {
  
  expire_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proposal.expire)
}
inline ::std::string* Proposal::mutable_expire() {
  
  // @@protoc_insertion_point(field_mutable:Proposal.expire)
  return expire_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Proposal::release_expire() {
  // @@protoc_insertion_point(field_release:Proposal.expire)
  
  return expire_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Proposal::set_allocated_expire(::std::string* expire) {
  if (expire != nullptr) {
    
  } else {
    
  }
  expire_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), expire);
  // @@protoc_insertion_point(field_set_allocated:Proposal.expire)
}

// int64 count = 8;
inline void Proposal::clear_count() {
  count_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 Proposal::count() const {
  // @@protoc_insertion_point(field_get:Proposal.count)
  return count_;
}
inline void Proposal::set_count(::google::protobuf::int64 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:Proposal.count)
}

// string founders = 9;
inline void Proposal::clear_founders() {
  founders_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Proposal::founders() const {
  // @@protoc_insertion_point(field_get:Proposal.founders)
  return founders_.GetNoArena();
}
inline void Proposal::set_founders(const ::std::string& value) {
  
  founders_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proposal.founders)
}
#if LANG_CXX11
inline void Proposal::set_founders(::std::string&& value) {
  
  founders_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proposal.founders)
}
#endif
inline void Proposal::set_founders(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  founders_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proposal.founders)
}
inline void Proposal::set_founders(const char* value, size_t size) {
  
  founders_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proposal.founders)
}
inline ::std::string* Proposal::mutable_founders() {
  
  // @@protoc_insertion_point(field_mutable:Proposal.founders)
  return founders_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Proposal::release_founders() {
  // @@protoc_insertion_point(field_release:Proposal.founders)
  
  return founders_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Proposal::set_allocated_founders(::std::string* founders) {
  if (founders != nullptr) {
    
  } else {
    
  }
  founders_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), founders);
  // @@protoc_insertion_point(field_set_allocated:Proposal.founders)
}

// string results = 10;
inline void Proposal::clear_results() {
  results_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Proposal::results() const {
  // @@protoc_insertion_point(field_get:Proposal.results)
  return results_.GetNoArena();
}
inline void Proposal::set_results(const ::std::string& value) {
  
  results_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proposal.results)
}
#if LANG_CXX11
inline void Proposal::set_results(::std::string&& value) {
  
  results_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proposal.results)
}
#endif
inline void Proposal::set_results(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  results_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proposal.results)
}
inline void Proposal::set_results(const char* value, size_t size) {
  
  results_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proposal.results)
}
inline ::std::string* Proposal::mutable_results() {
  
  // @@protoc_insertion_point(field_mutable:Proposal.results)
  return results_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Proposal::release_results() {
  // @@protoc_insertion_point(field_release:Proposal.results)
  
  return results_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Proposal::set_allocated_results(::std::string* results) {
  if (results != nullptr) {
    
  } else {
    
  }
  results_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), results);
  // @@protoc_insertion_point(field_set_allocated:Proposal.results)
}

// string timestamps = 11;
inline void Proposal::clear_timestamps() {
  timestamps_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Proposal::timestamps() const {
  // @@protoc_insertion_point(field_get:Proposal.timestamps)
  return timestamps_.GetNoArena();
}
inline void Proposal::set_timestamps(const ::std::string& value) {
  
  timestamps_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proposal.timestamps)
}
#if LANG_CXX11
inline void Proposal::set_timestamps(::std::string&& value) {
  
  timestamps_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proposal.timestamps)
}
#endif
inline void Proposal::set_timestamps(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  timestamps_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proposal.timestamps)
}
inline void Proposal::set_timestamps(const char* value, size_t size) {
  
  timestamps_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proposal.timestamps)
}
inline ::std::string* Proposal::mutable_timestamps() {
  
  // @@protoc_insertion_point(field_mutable:Proposal.timestamps)
  return timestamps_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Proposal::release_timestamps() {
  // @@protoc_insertion_point(field_release:Proposal.timestamps)
  
  return timestamps_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Proposal::set_allocated_timestamps(::std::string* timestamps) {
  if (timestamps != nullptr) {
    
  } else {
    
  }
  timestamps_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timestamps);
  // @@protoc_insertion_point(field_set_allocated:Proposal.timestamps)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_proposal_2eproto
